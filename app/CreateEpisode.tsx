"use client";
import { useCompletion } from "ai/react";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/GodnNeW0haD
 */
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useEffect, useState } from "react";
import { Label } from "@/components/ui/label";
import { usePostHog } from "posthog-js/react";
import TranscriptViewer from "./TranscriptViewer";
async function fetchEpisode(episodeId: any) {
  return await (
    await fetch(`/api/episode/${episodeId}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
      next: {
        revalidate: 0,
      },
    })
  ).json();
}

function usePollEpisode() {
  const [episodeId, setEpisodeId] = useState<string>("");
  const [url, setUrl] = useState<string>("");
  const [episodeLoading, setEpisodeLoading] = useState<boolean>(false);
  const [transcript, setTranscript] = useState<string>("");

  useEffect(() => {
    if (episodeId) {
      setEpisodeLoading(true);
      const interval = setInterval(async () => {
        const episode = await fetchEpisode(episodeId);
        const transcriptResponse = episode["transcript"];
        if (transcriptResponse) {
          setTranscript(transcriptResponse);
        }
        const episodeUrl = episode["url"];
        if (episodeUrl) {
          setUrl(episodeUrl);
          clearInterval(interval);
          setEpisodeLoading(false);
        }
      }, 5000);
    }
  }, [episodeId]);

  return { episodeId, setEpisodeId, url, episodeLoading, transcript };
}

export function CreateEpisode() {
  const { completion, handleInputChange, handleSubmit, input, isLoading } =
    useCompletion({
      api: "/api/custom_completions",
      onFinish(prompt, completion) {
        console.log("on finished called");
        const splitArr = completion.split("[SENTINEL]");
        const id = JSON.parse(splitArr[splitArr.length - 2])["id"];
        setEpisodeId(id);
      },
    });
  const result = completion.split("[SENTINEL]");
  console.log(result)
  const realtimeTranscript = result?.length >= 2 ? JSON.parse(result[result.length - 2])?.transcript : "";
  const { episodeId, setEpisodeId, url, episodeLoading, transcript } =
    usePollEpisode();
  return (

    <main className="flex-1 py-8 px-4 bg-gray-50 dark:bg-gray-800">
      <div className="container mx-auto">
        <form
          className="w-full max-w-lg mx-auto space-y-4"
          onSubmit={handleSubmit}
        >
          <Label htmlFor="inputText">
            Paste an article URL or some text to generate a podcast from it
          </Label>
          <Input
            value={input}
            onChange={handleInputChange}
            name="inputText"
            className="w-full"
            placeholder="Paste your text or URL here"
            type="text"
          />
          <Button className="w-full" type="submit" disabled={isLoading}>
            Generate Podcast Episode
          </Button>
        </form>
        {isLoading && (
          // spinner
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100"></div>
        )}
        <TranscriptViewer transcript={realtimeTranscript} />
        <div className="mt-8 space-y-4">
          <h2 className="text-xl font-bold text-gray-900 dark:text-gray-100">
            Your Podcast Episode
          </h2>
          <p>Episode generation takes around 3 minutes</p>
          <div className="flex flex-col items-center space-x-4">
            {url && (
              <div>
                <AudioPlayer url={url} />
              </div>
            )}
            {episodeLoading && (
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100"></div>
            )}
            {episodeLoading && transcript && (
              <div>
                <p>Generating Audio</p>
              </div>
            )}
            {episodeLoading && !transcript && (
              <div>
                <p>Generating Transcript</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </main>
  );
}

const AudioPlayer = ({ url }: { url: string }) => {
  const something = usePostHog();
  return (
    <audio
      autoFocus
      controls
      onPlay={() => {
        something.capture("played");
      }}
    >
      <source src={url} type="audio/mpeg" />
      Your browser does not support the audio element.
    </audio>
  );
};
