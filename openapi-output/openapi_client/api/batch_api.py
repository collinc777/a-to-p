# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.batch_launch_response import BatchLaunchResponse
from openapi_client.models.batch_list import BatchList
from openapi_client.models.batch_request import BatchRequest
from openapi_client.models.paginated_batch_response import PaginatedBatchResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BatchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def batch_batch_list(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BatchList]:
        """List Batch Jobs


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_batch_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BatchList]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def batch_batch_list_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BatchList]]:
        """List Batch Jobs


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_batch_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BatchList]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def batch_batch_list_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Batch Jobs


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_batch_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BatchList]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _batch_batch_list_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'FeatureApiAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/batch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def feature_batch_create(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        batch_request: BatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BatchLaunchResponse:
        """Launch Batch Job

         Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It's -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```   ### Limitations: You can have up to `5` concurrent running Jobs & input up to `500` requests per Batch           <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`moderation`| |`text`|`chat`| |`text`|`question_answer`| |`image`|`logo_detection`| |`image`|`anonymization`| |`text`|`anonymization`| |`text`|`embeddings`| |`text`|`spell_check`| |`audio`|`speech_to_text_async`| |`image`|`landmark_detection`| |`audio`|`text_to_speech`| |`text`|`custom_named_entity_recognition`| |`image`|`face_detection`| |`text`|`custom_classification`| |`translation`|`automatic_translation`| |`translation`|`document_translation`| |`text`|`topic_extraction`| |`text`|`generation`| |`text`|`code_generation`| |`image`|`generation`| |`video`|`text_detection_async`| |`text`|`sentiment_analysis`| |`text`|`syntax_analysis`| |`text`|`keyword_extraction`| |`text`|`named_entity_recognition`| |`text`|`search`| |`text`|`summarize`| |`translation`|`language_detection`| |`image`|`object_detection`| |`image`|`explicit_content`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`|  </details>  

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param batch_request: (required)
        :type batch_request: BatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_create_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            batch_request=batch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchLaunchResponse",
            '400': "BadRequest",
            '500': "Error",
            '403': "Error",
            '404': "NotFoundResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def feature_batch_create_with_http_info(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        batch_request: BatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BatchLaunchResponse]:
        """Launch Batch Job

         Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It's -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```   ### Limitations: You can have up to `5` concurrent running Jobs & input up to `500` requests per Batch           <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`moderation`| |`text`|`chat`| |`text`|`question_answer`| |`image`|`logo_detection`| |`image`|`anonymization`| |`text`|`anonymization`| |`text`|`embeddings`| |`text`|`spell_check`| |`audio`|`speech_to_text_async`| |`image`|`landmark_detection`| |`audio`|`text_to_speech`| |`text`|`custom_named_entity_recognition`| |`image`|`face_detection`| |`text`|`custom_classification`| |`translation`|`automatic_translation`| |`translation`|`document_translation`| |`text`|`topic_extraction`| |`text`|`generation`| |`text`|`code_generation`| |`image`|`generation`| |`video`|`text_detection_async`| |`text`|`sentiment_analysis`| |`text`|`syntax_analysis`| |`text`|`keyword_extraction`| |`text`|`named_entity_recognition`| |`text`|`search`| |`text`|`summarize`| |`translation`|`language_detection`| |`image`|`object_detection`| |`image`|`explicit_content`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`|  </details>  

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param batch_request: (required)
        :type batch_request: BatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_create_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            batch_request=batch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchLaunchResponse",
            '400': "BadRequest",
            '500': "Error",
            '403': "Error",
            '404': "NotFoundResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def feature_batch_create_without_preload_content(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        batch_request: BatchRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Launch Batch Job

         Launch a async Batch job, given a job name that will be used as its id.  Each request should have the same parameters as you would normally pass to a feature.   You can also pass an optional paramater `name` to help better identify each requests you send.   Example with `text`/`sentiment_analysis`:  ```json \"requests\": [     {         \"text\": \"It's -25 outside and I am so hot.\",         \"language\": \"en\",         \"providers\": \"google,amazon\"     },     {         \"name\": \"mixed\",         \"text\": \"Overall I am satisfied with my experience at Amazon, but two areas of major improvement needed.\",         \"language\": \"en\",         \"providers\": \"google\"     },     ... ] ```   ### Limitations: You can have up to `5` concurrent running Jobs & input up to `500` requests per Batch           <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Features</strong></summary>    |Feature Name|Subfeature Name| |------------|---------------| |`text`|`moderation`| |`text`|`chat`| |`text`|`question_answer`| |`image`|`logo_detection`| |`image`|`anonymization`| |`text`|`anonymization`| |`text`|`embeddings`| |`text`|`spell_check`| |`audio`|`speech_to_text_async`| |`image`|`landmark_detection`| |`audio`|`text_to_speech`| |`text`|`custom_named_entity_recognition`| |`image`|`face_detection`| |`text`|`custom_classification`| |`translation`|`automatic_translation`| |`translation`|`document_translation`| |`text`|`topic_extraction`| |`text`|`generation`| |`text`|`code_generation`| |`image`|`generation`| |`video`|`text_detection_async`| |`text`|`sentiment_analysis`| |`text`|`syntax_analysis`| |`text`|`keyword_extraction`| |`text`|`named_entity_recognition`| |`text`|`search`| |`text`|`summarize`| |`translation`|`language_detection`| |`image`|`object_detection`| |`image`|`explicit_content`| |`ocr`|`invoice_parser`| |`ocr`|`resume_parser`| |`ocr`|`receipt_parser`| |`ocr`|`identity_parser`|  </details>  

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param batch_request: (required)
        :type batch_request: BatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_create_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            batch_request=batch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchLaunchResponse",
            '400': "BadRequest",
            '500': "Error",
            '403': "Error",
            '404': "NotFoundResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _feature_batch_create_serialize(
        self,
        feature,
        name,
        subfeature,
        batch_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if feature is not None:
            _path_params['feature'] = feature
        if name is not None:
            _path_params['name'] = name
        if subfeature is not None:
            _path_params['subfeature'] = subfeature
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if batch_request is not None:
            _body_params = batch_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'FeatureApiAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{feature}/{subfeature}/batch/{name}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def feature_batch_destroy(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete Batch Job

        Api view with custom pagination method to return paginated response from any queryset

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_destroy_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def feature_batch_destroy_with_http_info(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete Batch Job

        Api view with custom pagination method to return paginated response from any queryset

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_destroy_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def feature_batch_destroy_without_preload_content(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Batch Job

        Api view with custom pagination method to return paginated response from any queryset

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_destroy_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _feature_batch_destroy_serialize(
        self,
        feature,
        name,
        subfeature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if feature is not None:
            _path_params['feature'] = feature
        if name is not None:
            _path_params['name'] = name
        if subfeature is not None:
            _path_params['subfeature'] = subfeature
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'FeatureApiAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{feature}/{subfeature}/batch/{name}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def feature_batch_retrieve(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        name2: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        page: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        public_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        status: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="* `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedBatchResponse:
        """Get Batch Job Result

        Return paginated response of requests with their status and their responses if the request succeeded or errror if failed

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param name2:
        :type name2: str
        :param page:
        :type page: int
        :param public_id:
        :type public_id: int
        :param status: * `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_retrieve_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            name2=name2,
            page=page,
            public_id=public_id,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedBatchResponse",
            '400': "BadRequest",
            '500': "Error",
            '403': "Error",
            '404': "NotFoundResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def feature_batch_retrieve_with_http_info(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        name2: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        page: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        public_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        status: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="* `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedBatchResponse]:
        """Get Batch Job Result

        Return paginated response of requests with their status and their responses if the request succeeded or errror if failed

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param name2:
        :type name2: str
        :param page:
        :type page: int
        :param public_id:
        :type public_id: int
        :param status: * `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_retrieve_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            name2=name2,
            page=page,
            public_id=public_id,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedBatchResponse",
            '400': "BadRequest",
            '500': "Error",
            '403': "Error",
            '404': "NotFoundResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def feature_batch_retrieve_without_preload_content(
        self,
        feature: StrictStr,
        name: StrictStr,
        subfeature: StrictStr,
        name2: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        page: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        public_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        status: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="* `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Batch Job Result

        Return paginated response of requests with their status and their responses if the request succeeded or errror if failed

        :param feature: (required)
        :type feature: str
        :param name: (required)
        :type name: str
        :param subfeature: (required)
        :type subfeature: str
        :param name2:
        :type name2: str
        :param page:
        :type page: int
        :param public_id:
        :type public_id: int
        :param status: * `succeeded` - Status Succeeded * `failed` - Status Failed * `finished` - Status Finished * `processing` - Status Processing
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._feature_batch_retrieve_serialize(
            feature=feature,
            name=name,
            subfeature=subfeature,
            name2=name2,
            page=page,
            public_id=public_id,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedBatchResponse",
            '400': "BadRequest",
            '500': "Error",
            '403': "Error",
            '404': "NotFoundResponse",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _feature_batch_retrieve_serialize(
        self,
        feature,
        name,
        subfeature,
        name2,
        page,
        public_id,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if feature is not None:
            _path_params['feature'] = feature
        if name is not None:
            _path_params['name'] = name
        if subfeature is not None:
            _path_params['subfeature'] = subfeature
        # process the query parameters
        if name2 is not None:
            
            _query_params.append(('name', name2))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if public_id is not None:
            
            _query_params.append(('public_id', public_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'FeatureApiAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{feature}/{subfeature}/batch/{name}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


