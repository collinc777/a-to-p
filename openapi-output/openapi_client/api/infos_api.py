# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.provider_subfeature import ProviderSubfeature

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class InfosApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def info_info_provider_subfeatures_list(
        self,
        feature__name: Optional[StrictStr] = None,
        gender: Annotated[Optional[StrictStr], Field(description="Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature")] = None,
        is_working: Optional[StrictBool] = None,
        language: Annotated[Optional[StrictStr], Field(description="languages [icontains]")] = None,
        phase__name: Optional[StrictStr] = None,
        provider__name: Optional[StrictStr] = None,
        subfeature__name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProviderSubfeature]:
        """List Providers Subfeatures

        List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you'd need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```

        :param feature__name:
        :type feature__name: str
        :param gender: Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature
        :type gender: str
        :param is_working:
        :type is_working: bool
        :param language: languages [icontains]
        :type language: str
        :param phase__name:
        :type phase__name: str
        :param provider__name:
        :type provider__name: str
        :param subfeature__name:
        :type subfeature__name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._info_info_provider_subfeatures_list_serialize(
            feature__name=feature__name,
            gender=gender,
            is_working=is_working,
            language=language,
            phase__name=phase__name,
            provider__name=provider__name,
            subfeature__name=subfeature__name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProviderSubfeature]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def info_info_provider_subfeatures_list_with_http_info(
        self,
        feature__name: Optional[StrictStr] = None,
        gender: Annotated[Optional[StrictStr], Field(description="Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature")] = None,
        is_working: Optional[StrictBool] = None,
        language: Annotated[Optional[StrictStr], Field(description="languages [icontains]")] = None,
        phase__name: Optional[StrictStr] = None,
        provider__name: Optional[StrictStr] = None,
        subfeature__name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProviderSubfeature]]:
        """List Providers Subfeatures

        List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you'd need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```

        :param feature__name:
        :type feature__name: str
        :param gender: Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature
        :type gender: str
        :param is_working:
        :type is_working: bool
        :param language: languages [icontains]
        :type language: str
        :param phase__name:
        :type phase__name: str
        :param provider__name:
        :type provider__name: str
        :param subfeature__name:
        :type subfeature__name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._info_info_provider_subfeatures_list_serialize(
            feature__name=feature__name,
            gender=gender,
            is_working=is_working,
            language=language,
            phase__name=phase__name,
            provider__name=provider__name,
            subfeature__name=subfeature__name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProviderSubfeature]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def info_info_provider_subfeatures_list_without_preload_content(
        self,
        feature__name: Optional[StrictStr] = None,
        gender: Annotated[Optional[StrictStr], Field(description="Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature")] = None,
        is_working: Optional[StrictBool] = None,
        language: Annotated[Optional[StrictStr], Field(description="languages [icontains]")] = None,
        phase__name: Optional[StrictStr] = None,
        provider__name: Optional[StrictStr] = None,
        subfeature__name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Providers Subfeatures

        List Provider and features relations : You can get a list of *all providers* for a *feature* or *all features* for a *given provider*.  You can have the detailed information on the **pricing**, **supported languages** as well as the **models** for providers who propose different models (eg: voice models available for a text to speech provider).  Example : If you want the detailed list of all providers that can analyse the sentiment of a text written in french, you'd need to set `feature__name=text`,  `subfeature__name=sentiment_analysis` and `languages=fr`.  Which will look like the following :   ```bash curl --request GET  https://api.edenai.run/v2/info/provider_subfeatures?subfeature__name=sentiment_analysis&feature__name=text&languages=fr ```

        :param feature__name:
        :type feature__name: str
        :param gender: Accepts two values: either 'male' or 'female'. Used to                              filter models voices for the text_to_speech subfeature
        :type gender: str
        :param is_working:
        :type is_working: bool
        :param language: languages [icontains]
        :type language: str
        :param phase__name:
        :type phase__name: str
        :param provider__name:
        :type provider__name: str
        :param subfeature__name:
        :type subfeature__name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._info_info_provider_subfeatures_list_serialize(
            feature__name=feature__name,
            gender=gender,
            is_working=is_working,
            language=language,
            phase__name=phase__name,
            provider__name=provider__name,
            subfeature__name=subfeature__name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProviderSubfeature]",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _info_info_provider_subfeatures_list_serialize(
        self,
        feature__name,
        gender,
        is_working,
        language,
        phase__name,
        provider__name,
        subfeature__name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if feature__name is not None:
            
            _query_params.append(('feature__name', feature__name))
            
        if gender is not None:
            
            _query_params.append(('gender', gender))
            
        if is_working is not None:
            
            _query_params.append(('is_working', is_working))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if phase__name is not None:
            
            _query_params.append(('phase__name', phase__name))
            
        if provider__name is not None:
            
            _query_params.append(('provider__name', provider__name))
            
        if subfeature__name is not None:
            
            _query_params.append(('subfeature__name', subfeature__name))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/info/provider_subfeatures',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


