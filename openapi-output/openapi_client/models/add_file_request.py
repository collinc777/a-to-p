# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.data_type_enum import DataTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class AddFileRequest(BaseModel):
    """
    AddFileRequest
    """ # noqa: E501
    data_type: DataTypeEnum
    file: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**")
    file_url: Optional[StrictStr] = Field(default=None, description="File **URL** to analyse to be used with with *content-type*: **application/json**.")
    metadata: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Optional parameter: Attach metadata to the uploaded file data in your database. Provide a stringified JSON with key-value pairs. Useful in `filter_document` when querying the language model, it allows you to filter data with your Chatbot by considering only documents that have the specified metadata.")
    provider: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="Select a provider to use, only for audio (speech-to-text) & pdf (ocr-async) files.")
    __properties: ClassVar[List[str]] = ["data_type", "file", "file_url", "metadata", "provider"]

    @field_validator('file')
    def file_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(?:pdf|csv|amr|flac|wav|ogg|mp3|mp4|webm)$", value):
            raise ValueError(r"must validate the regular expression /(?:pdf|csv|amr|flac|wav|ogg|mp3|mp4|webm)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if file_url (nullable) is None
        # and model_fields_set contains the field
        if self.file_url is None and "file_url" in self.model_fields_set:
            _dict['file_url'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddFileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data_type": obj.get("data_type"),
            "file": obj.get("file"),
            "file_url": obj.get("file_url"),
            "metadata": obj.get("metadata"),
            "provider": obj.get("provider")
        })
        return _obj


