# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559359160800 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559359160800
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559359459904 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559359459904
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364450848 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364450848
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364530464 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364530464
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364535872 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364535872
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364560944 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364560944
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364564128 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364564128
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364615936 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364615936
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364619824 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364619824
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364720768 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364720768
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364729520 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364729520
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364731056 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364731056
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364750544 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364750544
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364772304 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364772304
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364784560 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364784560
from openapi_client.models.pydantic_main_audiospeech_to_text_async_speech_to_text_async_data_class94559364816480 import PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364816480
from typing import Optional, Set
from typing_extensions import Self

class AudiospeechToTextAsyncModel(BaseModel):
    """
    AudiospeechToTextAsyncModel
    """ # noqa: E501
    voci: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364450848] = None
    voxist: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364535872] = None
    microsoft: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364729520] = None
    google: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364731056] = None
    ibm: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364750544] = None
    oneai: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364560944] = None
    revai: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364564128] = None
    amazon: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559359459904] = None
    gladia: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364530464] = None
    neuralspace: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364784560] = None
    assembly: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559359160800] = None
    faker: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364816480] = None
    speechmatics: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364615936] = None
    symbl: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364619824] = None
    openai: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364720768] = None
    deepgram: Optional[PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364772304] = None
    __properties: ClassVar[List[str]] = ["voci", "voxist", "microsoft", "google", "ibm", "oneai", "revai", "amazon", "gladia", "neuralspace", "assembly", "faker", "speechmatics", "symbl", "openai", "deepgram"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudiospeechToTextAsyncModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of voci
        if self.voci:
            _dict['voci'] = self.voci.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voxist
        if self.voxist:
            _dict['voxist'] = self.voxist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft
        if self.microsoft:
            _dict['microsoft'] = self.microsoft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google
        if self.google:
            _dict['google'] = self.google.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ibm
        if self.ibm:
            _dict['ibm'] = self.ibm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oneai
        if self.oneai:
            _dict['oneai'] = self.oneai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revai
        if self.revai:
            _dict['revai'] = self.revai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon
        if self.amazon:
            _dict['amazon'] = self.amazon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gladia
        if self.gladia:
            _dict['gladia'] = self.gladia.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neuralspace
        if self.neuralspace:
            _dict['neuralspace'] = self.neuralspace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assembly
        if self.assembly:
            _dict['assembly'] = self.assembly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of faker
        if self.faker:
            _dict['faker'] = self.faker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speechmatics
        if self.speechmatics:
            _dict['speechmatics'] = self.speechmatics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of symbl
        if self.symbl:
            _dict['symbl'] = self.symbl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of openai
        if self.openai:
            _dict['openai'] = self.openai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deepgram
        if self.deepgram:
            _dict['deepgram'] = self.deepgram.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudiospeechToTextAsyncModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "voci": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364450848.from_dict(obj["voci"]) if obj.get("voci") is not None else None,
            "voxist": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364535872.from_dict(obj["voxist"]) if obj.get("voxist") is not None else None,
            "microsoft": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364729520.from_dict(obj["microsoft"]) if obj.get("microsoft") is not None else None,
            "google": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364731056.from_dict(obj["google"]) if obj.get("google") is not None else None,
            "ibm": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364750544.from_dict(obj["ibm"]) if obj.get("ibm") is not None else None,
            "oneai": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364560944.from_dict(obj["oneai"]) if obj.get("oneai") is not None else None,
            "revai": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364564128.from_dict(obj["revai"]) if obj.get("revai") is not None else None,
            "amazon": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559359459904.from_dict(obj["amazon"]) if obj.get("amazon") is not None else None,
            "gladia": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364530464.from_dict(obj["gladia"]) if obj.get("gladia") is not None else None,
            "neuralspace": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364784560.from_dict(obj["neuralspace"]) if obj.get("neuralspace") is not None else None,
            "assembly": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559359160800.from_dict(obj["assembly"]) if obj.get("assembly") is not None else None,
            "faker": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364816480.from_dict(obj["faker"]) if obj.get("faker") is not None else None,
            "speechmatics": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364615936.from_dict(obj["speechmatics"]) if obj.get("speechmatics") is not None else None,
            "symbl": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364619824.from_dict(obj["symbl"]) if obj.get("symbl") is not None else None,
            "openai": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364720768.from_dict(obj["openai"]) if obj.get("openai") is not None else None,
            "deepgram": PydanticMainAudiospeechToTextAsyncSpeechToTextAsyncDataClass94559364772304.from_dict(obj["deepgram"]) if obj.get("deepgram") is not None else None
        })
        return _obj


