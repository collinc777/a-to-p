# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FinancialCustomerInformation(BaseModel):
    """
    FinancialCustomerInformation
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the invoiced customer.")
    id_reference: Optional[StrictStr] = Field(default=None, description="Unique reference ID for the customer.")
    mailling_address: Optional[StrictStr] = Field(default=None, description="The mailing address of the customer.")
    billing_address: Optional[StrictStr] = Field(default=None, description="The explicit billing address for the customer.")
    shipping_address: Optional[StrictStr] = Field(default=None, description="The shipping address for the customer.")
    service_address: Optional[StrictStr] = Field(default=None, description="The service address associated with the customer.")
    remittance_address: Optional[StrictStr] = Field(default=None, description="The address to which payments should be remitted.")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the customer.")
    phone: Optional[StrictStr] = Field(default=None, description="The phone number associated with the customer.")
    vat_number: Optional[StrictStr] = Field(default=None, description="VAT (Value Added Tax) number of the customer.")
    abn_number: Optional[StrictStr] = Field(default=None, description="ABN (Australian Business Number) of the customer.")
    gst_number: Optional[StrictStr] = Field(default=None, description="GST (Goods and Services Tax) number of the customer.")
    pan_number: Optional[StrictStr] = Field(default=None, description="PAN (Permanent Account Number) of the customer.")
    business_number: Optional[StrictStr] = Field(default=None, description="Business registration number of the customer.")
    siret_number: Optional[StrictStr] = Field(default=None, description="SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Établissements) number of the customer.")
    siren_number: Optional[StrictStr] = Field(default=None, description="SIREN (Système d'Identification du Répertoire des Entreprises) number of the customer.")
    customer_number: Optional[StrictStr] = Field(default=None, description="Customer identification number.")
    coc_number: Optional[StrictStr] = Field(default=None, description="Chamber of Commerce registration number.")
    fiscal_number: Optional[StrictStr] = Field(default=None, description="Fiscal identification number of the customer.")
    registration_number: Optional[StrictStr] = Field(default=None, description="Official registration number of the customer.")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax identification number of the customer.")
    website: Optional[StrictStr] = Field(default=None, description="The website associated with the customer.")
    remit_to_name: Optional[StrictStr] = Field(default=None, description="The name associated with the customer's remittance address.")
    city: Optional[StrictStr] = Field(default=None, description="The city associated with the customer's address.")
    country: Optional[StrictStr] = Field(default=None, description="The country associated with the customer's address.")
    house_number: Optional[StrictStr] = Field(default=None, description="The house number associated with the customer's address.")
    province: Optional[StrictStr] = Field(default=None, description="The province associated with the customer's address.")
    street_name: Optional[StrictStr] = Field(default=None, description="The street name associated with the customer's address.")
    zip_code: Optional[StrictStr] = Field(default=None, description="The ZIP code associated with the customer's address.")
    municipality: Optional[StrictStr] = Field(default=None, description="The municipality associated with the customer's address.")
    __properties: ClassVar[List[str]] = ["name", "id_reference", "mailling_address", "billing_address", "shipping_address", "service_address", "remittance_address", "email", "phone", "vat_number", "abn_number", "gst_number", "pan_number", "business_number", "siret_number", "siren_number", "customer_number", "coc_number", "fiscal_number", "registration_number", "tax_id", "website", "remit_to_name", "city", "country", "house_number", "province", "street_name", "zip_code", "municipality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialCustomerInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialCustomerInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "id_reference": obj.get("id_reference"),
            "mailling_address": obj.get("mailling_address"),
            "billing_address": obj.get("billing_address"),
            "shipping_address": obj.get("shipping_address"),
            "service_address": obj.get("service_address"),
            "remittance_address": obj.get("remittance_address"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "vat_number": obj.get("vat_number"),
            "abn_number": obj.get("abn_number"),
            "gst_number": obj.get("gst_number"),
            "pan_number": obj.get("pan_number"),
            "business_number": obj.get("business_number"),
            "siret_number": obj.get("siret_number"),
            "siren_number": obj.get("siren_number"),
            "customer_number": obj.get("customer_number"),
            "coc_number": obj.get("coc_number"),
            "fiscal_number": obj.get("fiscal_number"),
            "registration_number": obj.get("registration_number"),
            "tax_id": obj.get("tax_id"),
            "website": obj.get("website"),
            "remit_to_name": obj.get("remit_to_name"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "house_number": obj.get("house_number"),
            "province": obj.get("province"),
            "street_name": obj.get("street_name"),
            "zip_code": obj.get("zip_code"),
            "municipality": obj.get("municipality")
        })
        return _obj


