# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.financial_barcode import FinancialBarcode
from typing import Optional, Set
from typing_extensions import Self

class FinancialDocumentInformation(BaseModel):
    """
    FinancialDocumentInformation
    """ # noqa: E501
    invoice_receipt_id: Optional[StrictStr] = Field(default=None, description="Identifier for the invoice.")
    purchase_order: Optional[StrictStr] = Field(default=None, description="Purchase order related to the document.")
    invoice_date: Optional[StrictStr] = Field(default=None, description="Date of the invoice.")
    time: Optional[StrictStr] = Field(default=None, description="Time associated with the document.")
    invoice_due_date: Optional[StrictStr] = Field(default=None, description="Due date for the invoice.")
    service_start_date: Optional[StrictStr] = Field(default=None, description="Start date of the service associated with the document.")
    service_end_date: Optional[StrictStr] = Field(default=None, description="End date of the service associated with the document.")
    reference: Optional[StrictStr] = Field(default=None, description="Reference number associated with the document.")
    biller_code: Optional[StrictStr] = Field(default=None, description="Biller code associated with the document.")
    order_date: Optional[StrictStr] = Field(default=None, description="Date of the order associated with the document.")
    tracking_number: Optional[StrictStr] = Field(default=None, description="Tracking number associated with the document.")
    barcodes: Optional[List[FinancialBarcode]] = Field(default=None, description="List of barcodes associated with the document.")
    __properties: ClassVar[List[str]] = ["invoice_receipt_id", "purchase_order", "invoice_date", "time", "invoice_due_date", "service_start_date", "service_end_date", "reference", "biller_code", "order_date", "tracking_number", "barcodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialDocumentInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in barcodes (list)
        _items = []
        if self.barcodes:
            for _item in self.barcodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['barcodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialDocumentInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_receipt_id": obj.get("invoice_receipt_id"),
            "purchase_order": obj.get("purchase_order"),
            "invoice_date": obj.get("invoice_date"),
            "time": obj.get("time"),
            "invoice_due_date": obj.get("invoice_due_date"),
            "service_start_date": obj.get("service_start_date"),
            "service_end_date": obj.get("service_end_date"),
            "reference": obj.get("reference"),
            "biller_code": obj.get("biller_code"),
            "order_date": obj.get("order_date"),
            "tracking_number": obj.get("tracking_number"),
            "barcodes": [FinancialBarcode.from_dict(_item) for _item in obj["barcodes"]] if obj.get("barcodes") is not None else None
        })
        return _obj


