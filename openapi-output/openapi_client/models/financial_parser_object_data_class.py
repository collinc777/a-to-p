# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.financial_bank_information import FinancialBankInformation
from openapi_client.models.financial_customer_information import FinancialCustomerInformation
from openapi_client.models.financial_document_information import FinancialDocumentInformation
from openapi_client.models.financial_document_metadata import FinancialDocumentMetadata
from openapi_client.models.financial_line_item import FinancialLineItem
from openapi_client.models.financial_local_information import FinancialLocalInformation
from openapi_client.models.financial_merchant_information import FinancialMerchantInformation
from openapi_client.models.financial_payment_information import FinancialPaymentInformation
from typing import Optional, Set
from typing_extensions import Self

class FinancialParserObjectDataClass(BaseModel):
    """
    FinancialParserObjectDataClass
    """ # noqa: E501
    customer_information: FinancialCustomerInformation
    merchant_information: FinancialMerchantInformation
    payment_information: FinancialPaymentInformation
    financial_document_information: FinancialDocumentInformation
    local: FinancialLocalInformation
    bank: FinancialBankInformation
    item_lines: Optional[List[FinancialLineItem]] = Field(default=None, description="List of line items associated with the document.")
    document_metadata: FinancialDocumentMetadata
    __properties: ClassVar[List[str]] = ["customer_information", "merchant_information", "payment_information", "financial_document_information", "local", "bank", "item_lines", "document_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialParserObjectDataClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_information
        if self.customer_information:
            _dict['customer_information'] = self.customer_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_information
        if self.merchant_information:
            _dict['merchant_information'] = self.merchant_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_information
        if self.payment_information:
            _dict['payment_information'] = self.payment_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of financial_document_information
        if self.financial_document_information:
            _dict['financial_document_information'] = self.financial_document_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local
        if self.local:
            _dict['local'] = self.local.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank
        if self.bank:
            _dict['bank'] = self.bank.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_lines (list)
        _items = []
        if self.item_lines:
            for _item in self.item_lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['item_lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of document_metadata
        if self.document_metadata:
            _dict['document_metadata'] = self.document_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialParserObjectDataClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_information": FinancialCustomerInformation.from_dict(obj["customer_information"]) if obj.get("customer_information") is not None else None,
            "merchant_information": FinancialMerchantInformation.from_dict(obj["merchant_information"]) if obj.get("merchant_information") is not None else None,
            "payment_information": FinancialPaymentInformation.from_dict(obj["payment_information"]) if obj.get("payment_information") is not None else None,
            "financial_document_information": FinancialDocumentInformation.from_dict(obj["financial_document_information"]) if obj.get("financial_document_information") is not None else None,
            "local": FinancialLocalInformation.from_dict(obj["local"]) if obj.get("local") is not None else None,
            "bank": FinancialBankInformation.from_dict(obj["bank"]) if obj.get("bank") is not None else None,
            "item_lines": [FinancialLineItem.from_dict(_item) for _item in obj["item_lines"]] if obj.get("item_lines") is not None else None,
            "document_metadata": FinancialDocumentMetadata.from_dict(obj["document_metadata"]) if obj.get("document_metadata") is not None else None
        })
        return _obj


