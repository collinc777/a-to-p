# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FinancialPaymentInformation(BaseModel):
    """
    FinancialPaymentInformation
    """ # noqa: E501
    amount_due: Optional[StrictInt] = Field(default=None, description="Amount due for payment.")
    amount_tip: Optional[StrictInt] = Field(default=None, description="Tip amount in a financial transaction.")
    amount_shipping: Optional[StrictInt] = Field(default=None, description="Shipping cost in a financial transaction.")
    amount_change: Optional[StrictInt] = Field(default=None, description="Change amount in a financial transaction.")
    amount_paid: Optional[StrictInt] = Field(default=None, description="Amount already paid in a financial transaction.")
    total: Optional[StrictInt] = Field(default=None, description="Total amount in the invoice.")
    subtotal: Optional[StrictInt] = Field(default=None, description="Subtotal amount in a financial transaction.")
    total_tax: Optional[StrictInt] = Field(default=None, description="Total tax amount in a financial transaction.")
    tax_rate: Optional[StrictInt] = Field(default=None, description="Tax rate applied in a financial transaction.")
    discount: Optional[StrictInt] = Field(default=None, description="Discount amount applied in a financial transaction.")
    gratuity: Optional[StrictInt] = Field(default=None, description="Gratuity amount in a financial transaction.")
    service_charge: Optional[StrictInt] = Field(default=None, description="Service charge in a financial transaction.")
    previous_unpaid_balance: Optional[StrictInt] = Field(default=None, description="Previous unpaid balance in a financial transaction.")
    prior_balance: Optional[StrictInt] = Field(default=None, description="Prior balance before the current financial transaction.")
    payment_terms: Optional[StrictStr] = Field(default=None, description="Terms and conditions for payment.")
    payment_method: Optional[StrictStr] = Field(default=None, description="Payment method used in the financial transaction.")
    payment_card_number: Optional[StrictStr] = Field(default=None, description="Card number used in the payment.")
    payment_auth_code: Optional[StrictStr] = Field(default=None, description="Authorization code for the payment.")
    shipping_handling_charge: Optional[StrictInt] = Field(default=None, description="Charge for shipping and handling in a financial transaction.")
    transaction_number: Optional[StrictStr] = Field(default=None, description="Unique identifier for the financial transaction.")
    transaction_reference: Optional[StrictStr] = Field(default=None, description="Reference number for the financial transaction.")
    __properties: ClassVar[List[str]] = ["amount_due", "amount_tip", "amount_shipping", "amount_change", "amount_paid", "total", "subtotal", "total_tax", "tax_rate", "discount", "gratuity", "service_charge", "previous_unpaid_balance", "prior_balance", "payment_terms", "payment_method", "payment_card_number", "payment_auth_code", "shipping_handling_charge", "transaction_number", "transaction_reference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialPaymentInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialPaymentInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_due": obj.get("amount_due"),
            "amount_tip": obj.get("amount_tip"),
            "amount_shipping": obj.get("amount_shipping"),
            "amount_change": obj.get("amount_change"),
            "amount_paid": obj.get("amount_paid"),
            "total": obj.get("total"),
            "subtotal": obj.get("subtotal"),
            "total_tax": obj.get("total_tax"),
            "tax_rate": obj.get("tax_rate"),
            "discount": obj.get("discount"),
            "gratuity": obj.get("gratuity"),
            "service_charge": obj.get("service_charge"),
            "previous_unpaid_balance": obj.get("previous_unpaid_balance"),
            "prior_balance": obj.get("prior_balance"),
            "payment_terms": obj.get("payment_terms"),
            "payment_method": obj.get("payment_method"),
            "payment_card_number": obj.get("payment_card_number"),
            "payment_auth_code": obj.get("payment_auth_code"),
            "shipping_handling_charge": obj.get("shipping_handling_charge"),
            "transaction_number": obj.get("transaction_number"),
            "transaction_reference": obj.get("transaction_reference")
        })
        return _obj


