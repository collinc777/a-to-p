# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_imagebackground_removal_background_removal_data_class94559363671792 import PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363671792
from openapi_client.models.pydantic_main_imagebackground_removal_background_removal_data_class94559363754048 import PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363754048
from openapi_client.models.pydantic_main_imagebackground_removal_background_removal_data_class94559363754992 import PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363754992
from openapi_client.models.pydantic_main_imagebackground_removal_background_removal_data_class94559363759392 import PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363759392
from openapi_client.models.pydantic_main_imagebackground_removal_background_removal_data_class94559363760880 import PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363760880
from typing import Optional, Set
from typing_extensions import Self

class ImagebackgroundRemovalResponseModel(BaseModel):
    """
    ImagebackgroundRemovalResponseModel
    """ # noqa: E501
    photoroom: Optional[PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363754048] = None
    microsoft: Optional[PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363754992] = None
    stabilityai: Optional[PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363671792] = None
    api4ai: Optional[PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363759392] = None
    sentisight: Optional[PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363760880] = None
    __properties: ClassVar[List[str]] = ["photoroom", "microsoft", "stabilityai", "api4ai", "sentisight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImagebackgroundRemovalResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of photoroom
        if self.photoroom:
            _dict['photoroom'] = self.photoroom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft
        if self.microsoft:
            _dict['microsoft'] = self.microsoft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stabilityai
        if self.stabilityai:
            _dict['stabilityai'] = self.stabilityai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api4ai
        if self.api4ai:
            _dict['api4ai'] = self.api4ai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sentisight
        if self.sentisight:
            _dict['sentisight'] = self.sentisight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImagebackgroundRemovalResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "photoroom": PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363754048.from_dict(obj["photoroom"]) if obj.get("photoroom") is not None else None,
            "microsoft": PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363754992.from_dict(obj["microsoft"]) if obj.get("microsoft") is not None else None,
            "stabilityai": PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363671792.from_dict(obj["stabilityai"]) if obj.get("stabilityai") is not None else None,
            "api4ai": PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363759392.from_dict(obj["api4ai"]) if obj.get("api4ai") is not None else None,
            "sentisight": PydanticMainImagebackgroundRemovalBackgroundRemovalDataClass94559363760880.from_dict(obj["sentisight"]) if obj.get("sentisight") is not None else None
        })
        return _obj


