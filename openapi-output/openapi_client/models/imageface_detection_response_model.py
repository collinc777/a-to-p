# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364211600 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364211600
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364212544 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364212544
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364293520 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364293520
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364307712 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364307712
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364354448 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364354448
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364362304 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364362304
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364465152 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364465152
from openapi_client.models.pydantic_main_imageface_detection_face_detection_data_class94559364594240 import PydanticMainImagefaceDetectionFaceDetectionDataClass94559364594240
from typing import Optional, Set
from typing_extensions import Self

class ImagefaceDetectionResponseModel(BaseModel):
    """
    ImagefaceDetectionResponseModel
    """ # noqa: E501
    microsoft: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364594240] = None
    google: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364307712] = None
    picpurify: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364211600] = None
    amazon: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364212544] = None
    clarifai: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364354448] = None
    api4ai: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364362304] = None
    skybiometry: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364465152] = None
    eden_ai: Optional[PydanticMainImagefaceDetectionFaceDetectionDataClass94559364293520] = Field(default=None, alias="eden-ai")
    __properties: ClassVar[List[str]] = ["microsoft", "google", "picpurify", "amazon", "clarifai", "api4ai", "skybiometry", "eden-ai"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImagefaceDetectionResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of microsoft
        if self.microsoft:
            _dict['microsoft'] = self.microsoft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google
        if self.google:
            _dict['google'] = self.google.to_dict()
        # override the default output from pydantic by calling `to_dict()` of picpurify
        if self.picpurify:
            _dict['picpurify'] = self.picpurify.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon
        if self.amazon:
            _dict['amazon'] = self.amazon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clarifai
        if self.clarifai:
            _dict['clarifai'] = self.clarifai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api4ai
        if self.api4ai:
            _dict['api4ai'] = self.api4ai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skybiometry
        if self.skybiometry:
            _dict['skybiometry'] = self.skybiometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eden_ai
        if self.eden_ai:
            _dict['eden-ai'] = self.eden_ai.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImagefaceDetectionResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "microsoft": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364594240.from_dict(obj["microsoft"]) if obj.get("microsoft") is not None else None,
            "google": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364307712.from_dict(obj["google"]) if obj.get("google") is not None else None,
            "picpurify": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364211600.from_dict(obj["picpurify"]) if obj.get("picpurify") is not None else None,
            "amazon": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364212544.from_dict(obj["amazon"]) if obj.get("amazon") is not None else None,
            "clarifai": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364354448.from_dict(obj["clarifai"]) if obj.get("clarifai") is not None else None,
            "api4ai": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364362304.from_dict(obj["api4ai"]) if obj.get("api4ai") is not None else None,
            "skybiometry": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364465152.from_dict(obj["skybiometry"]) if obj.get("skybiometry") is not None else None,
            "eden-ai": PydanticMainImagefaceDetectionFaceDetectionDataClass94559364293520.from_dict(obj["eden-ai"]) if obj.get("eden-ai") is not None else None
        })
        return _obj


