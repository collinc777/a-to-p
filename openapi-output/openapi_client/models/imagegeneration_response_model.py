# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_imagegeneration_generation_data_class94559363581952 import PydanticMainImagegenerationGenerationDataClass94559363581952
from openapi_client.models.pydantic_main_imagegeneration_generation_data_class94559363660336 import PydanticMainImagegenerationGenerationDataClass94559363660336
from openapi_client.models.pydantic_main_imagegeneration_generation_data_class94559363666544 import PydanticMainImagegenerationGenerationDataClass94559363666544
from openapi_client.models.pydantic_main_imagegeneration_generation_data_class94559363669712 import PydanticMainImagegenerationGenerationDataClass94559363669712
from openapi_client.models.pydantic_main_imagegeneration_generation_data_class94559363674064 import PydanticMainImagegenerationGenerationDataClass94559363674064
from typing import Optional, Set
from typing_extensions import Self

class ImagegenerationResponseModel(BaseModel):
    """
    ImagegenerationResponseModel
    """ # noqa: E501
    replicate: Optional[PydanticMainImagegenerationGenerationDataClass94559363581952] = None
    deepai: Optional[PydanticMainImagegenerationGenerationDataClass94559363666544] = None
    amazon: Optional[PydanticMainImagegenerationGenerationDataClass94559363669712] = None
    stabilityai: Optional[PydanticMainImagegenerationGenerationDataClass94559363660336] = None
    openai: Optional[PydanticMainImagegenerationGenerationDataClass94559363674064] = None
    __properties: ClassVar[List[str]] = ["replicate", "deepai", "amazon", "stabilityai", "openai"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImagegenerationResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of replicate
        if self.replicate:
            _dict['replicate'] = self.replicate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deepai
        if self.deepai:
            _dict['deepai'] = self.deepai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon
        if self.amazon:
            _dict['amazon'] = self.amazon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stabilityai
        if self.stabilityai:
            _dict['stabilityai'] = self.stabilityai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of openai
        if self.openai:
            _dict['openai'] = self.openai.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImagegenerationResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "replicate": PydanticMainImagegenerationGenerationDataClass94559363581952.from_dict(obj["replicate"]) if obj.get("replicate") is not None else None,
            "deepai": PydanticMainImagegenerationGenerationDataClass94559363666544.from_dict(obj["deepai"]) if obj.get("deepai") is not None else None,
            "amazon": PydanticMainImagegenerationGenerationDataClass94559363669712.from_dict(obj["amazon"]) if obj.get("amazon") is not None else None,
            "stabilityai": PydanticMainImagegenerationGenerationDataClass94559363660336.from_dict(obj["stabilityai"]) if obj.get("stabilityai") is not None else None,
            "openai": PydanticMainImagegenerationGenerationDataClass94559363674064.from_dict(obj["openai"]) if obj.get("openai") is not None else None
        })
        return _obj


