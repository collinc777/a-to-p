# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bank_invoice import BankInvoice
from openapi_client.models.customer_information_invoice import CustomerInformationInvoice
from openapi_client.models.item_lines_invoice import ItemLinesInvoice
from openapi_client.models.locale_invoice import LocaleInvoice
from openapi_client.models.merchant_information_invoice import MerchantInformationInvoice
from openapi_client.models.taxes_invoice import TaxesInvoice
from typing import Optional, Set
from typing_extensions import Self

class InfosInvoiceParserDataClass(BaseModel):
    """
    InfosInvoiceParserDataClass
    """ # noqa: E501
    customer_information: Optional[CustomerInformationInvoice] = None
    merchant_information: Optional[MerchantInformationInvoice] = None
    invoice_number: Optional[StrictStr] = None
    invoice_total: Optional[StrictInt] = None
    invoice_subtotal: Optional[StrictInt] = None
    gratuity: Optional[StrictInt] = None
    amount_due: Optional[StrictInt] = None
    previous_unpaid_balance: Optional[StrictInt] = None
    discount: Optional[StrictInt] = None
    taxes: Optional[List[TaxesInvoice]] = None
    service_charge: Optional[StrictInt] = None
    payment_term: Optional[StrictStr] = None
    purchase_order: Optional[StrictStr] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    due_date: Optional[StrictStr] = None
    service_date: Optional[StrictStr] = None
    service_due_date: Optional[StrictStr] = None
    po_number: Optional[StrictStr] = None
    locale: Optional[LocaleInvoice] = None
    bank_informations: Optional[BankInvoice] = None
    item_lines: Optional[List[ItemLinesInvoice]] = None
    __properties: ClassVar[List[str]] = ["customer_information", "merchant_information", "invoice_number", "invoice_total", "invoice_subtotal", "gratuity", "amount_due", "previous_unpaid_balance", "discount", "taxes", "service_charge", "payment_term", "purchase_order", "date", "due_date", "service_date", "service_due_date", "po_number", "locale", "bank_informations", "item_lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfosInvoiceParserDataClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_information
        if self.customer_information:
            _dict['customer_information'] = self.customer_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_information
        if self.merchant_information:
            _dict['merchant_information'] = self.merchant_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item in self.taxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxes'] = _items
        # override the default output from pydantic by calling `to_dict()` of locale
        if self.locale:
            _dict['locale'] = self.locale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_informations
        if self.bank_informations:
            _dict['bank_informations'] = self.bank_informations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_lines (list)
        _items = []
        if self.item_lines:
            for _item in self.item_lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['item_lines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfosInvoiceParserDataClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_information": CustomerInformationInvoice.from_dict(obj["customer_information"]) if obj.get("customer_information") is not None else None,
            "merchant_information": MerchantInformationInvoice.from_dict(obj["merchant_information"]) if obj.get("merchant_information") is not None else None,
            "invoice_number": obj.get("invoice_number"),
            "invoice_total": obj.get("invoice_total"),
            "invoice_subtotal": obj.get("invoice_subtotal"),
            "gratuity": obj.get("gratuity"),
            "amount_due": obj.get("amount_due"),
            "previous_unpaid_balance": obj.get("previous_unpaid_balance"),
            "discount": obj.get("discount"),
            "taxes": [TaxesInvoice.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None,
            "service_charge": obj.get("service_charge"),
            "payment_term": obj.get("payment_term"),
            "purchase_order": obj.get("purchase_order"),
            "date": obj.get("date"),
            "due_date": obj.get("due_date"),
            "service_date": obj.get("service_date"),
            "service_due_date": obj.get("service_due_date"),
            "po_number": obj.get("po_number"),
            "locale": LocaleInvoice.from_dict(obj["locale"]) if obj.get("locale") is not None else None,
            "bank_informations": BankInvoice.from_dict(obj["bank_informations"]) if obj.get("bank_informations") is not None else None,
            "item_lines": [ItemLinesInvoice.from_dict(_item) for _item in obj["item_lines"]] if obj.get("item_lines") is not None else None
        })
        return _obj


