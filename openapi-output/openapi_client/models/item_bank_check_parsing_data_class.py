# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.micr_model import MicrModel
from typing import Optional, Set
from typing_extensions import Self

class ItemBankCheckParsingDataClass(BaseModel):
    """
    ItemBankCheckParsingDataClass
    """ # noqa: E501
    amount: StrictInt
    amount_text: StrictStr
    bank_address: StrictStr
    bank_name: StrictStr
    var_date: StrictStr = Field(alias="date")
    memo: StrictStr
    payer_address: StrictStr
    payer_name: StrictStr
    receiver_address: StrictStr
    receiver_name: StrictStr
    currency: StrictStr
    micr: MicrModel
    __properties: ClassVar[List[str]] = ["amount", "amount_text", "bank_address", "bank_name", "date", "memo", "payer_address", "payer_name", "receiver_address", "receiver_name", "currency", "micr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemBankCheckParsingDataClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of micr
        if self.micr:
            _dict['micr'] = self.micr.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemBankCheckParsingDataClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "amount_text": obj.get("amount_text"),
            "bank_address": obj.get("bank_address"),
            "bank_name": obj.get("bank_name"),
            "date": obj.get("date"),
            "memo": obj.get("memo"),
            "payer_address": obj.get("payer_address"),
            "payer_name": obj.get("payer_name"),
            "receiver_address": obj.get("receiver_address"),
            "receiver_name": obj.get("receiver_name"),
            "currency": obj.get("currency"),
            "micr": MicrModel.from_dict(obj["micr"]) if obj.get("micr") is not None else None
        })
        return _obj


