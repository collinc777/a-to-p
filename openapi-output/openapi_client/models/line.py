# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bounding_box import BoundingBox
from openapi_client.models.word import Word
from typing import Optional, Set
from typing_extensions import Self

class Line(BaseModel):
    """
    Line of a document      Attributes:         text (str): Text detected in the line         bounding_boxes (Sequence[BoundingBox]): Bounding boxes of the words in the line         words (Sequence[Word]): List of words of the line         confidence (float): Confidence of the line     
    """ # noqa: E501
    text: StrictStr = Field(description="Text detected in the line")
    words: Optional[List[Word]] = Field(default=None, description="List of words")
    bounding_box: BoundingBox = Field(description="Bounding boxes of the words in the line")
    confidence: StrictInt = Field(description="Confidence of the line")
    __properties: ClassVar[List[str]] = ["text", "words", "bounding_box", "confidence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Line from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in words (list)
        _items = []
        if self.words:
            for _item in self.words:
                if _item:
                    _items.append(_item.to_dict())
            _dict['words'] = _items
        # override the default output from pydantic by calling `to_dict()` of bounding_box
        if self.bounding_box:
            _dict['bounding_box'] = self.bounding_box.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Line from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "words": [Word.from_dict(_item) for _item in obj["words"]] if obj.get("words") is not None else None,
            "bounding_box": BoundingBox.from_dict(obj["bounding_box"]) if obj.get("bounding_box") is not None else None,
            "confidence": obj.get("confidence")
        })
        return _obj


