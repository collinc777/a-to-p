# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559364147696 import PydanticMainOcridentityParserIdentityParserDataClass94559364147696
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559364154608 import PydanticMainOcridentityParserIdentityParserDataClass94559364154608
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559364162448 import PydanticMainOcridentityParserIdentityParserDataClass94559364162448
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559367747968 import PydanticMainOcridentityParserIdentityParserDataClass94559367747968
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559367751728 import PydanticMainOcridentityParserIdentityParserDataClass94559367751728
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559367763936 import PydanticMainOcridentityParserIdentityParserDataClass94559367763936
from openapi_client.models.pydantic_main_ocridentity_parser_identity_parser_data_class94559367771200 import PydanticMainOcridentityParserIdentityParserDataClass94559367771200
from typing import Optional, Set
from typing_extensions import Self

class OcridentityParserResponseModel(BaseModel):
    """
    OcridentityParserResponseModel
    """ # noqa: E501
    klippa: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559364162448] = None
    mindee: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559364147696] = None
    affinda: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559364154608] = None
    microsoft: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559367763936] = None
    amazon: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559367771200] = None
    var_base64: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559367747968] = Field(default=None, alias="base64")
    eden_ai: Optional[PydanticMainOcridentityParserIdentityParserDataClass94559367751728] = Field(default=None, alias="eden-ai")
    __properties: ClassVar[List[str]] = ["klippa", "mindee", "affinda", "microsoft", "amazon", "base64", "eden-ai"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OcridentityParserResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of klippa
        if self.klippa:
            _dict['klippa'] = self.klippa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mindee
        if self.mindee:
            _dict['mindee'] = self.mindee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affinda
        if self.affinda:
            _dict['affinda'] = self.affinda.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft
        if self.microsoft:
            _dict['microsoft'] = self.microsoft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon
        if self.amazon:
            _dict['amazon'] = self.amazon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_base64
        if self.var_base64:
            _dict['base64'] = self.var_base64.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eden_ai
        if self.eden_ai:
            _dict['eden-ai'] = self.eden_ai.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OcridentityParserResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "klippa": PydanticMainOcridentityParserIdentityParserDataClass94559364162448.from_dict(obj["klippa"]) if obj.get("klippa") is not None else None,
            "mindee": PydanticMainOcridentityParserIdentityParserDataClass94559364147696.from_dict(obj["mindee"]) if obj.get("mindee") is not None else None,
            "affinda": PydanticMainOcridentityParserIdentityParserDataClass94559364154608.from_dict(obj["affinda"]) if obj.get("affinda") is not None else None,
            "microsoft": PydanticMainOcridentityParserIdentityParserDataClass94559367763936.from_dict(obj["microsoft"]) if obj.get("microsoft") is not None else None,
            "amazon": PydanticMainOcridentityParserIdentityParserDataClass94559367771200.from_dict(obj["amazon"]) if obj.get("amazon") is not None else None,
            "base64": PydanticMainOcridentityParserIdentityParserDataClass94559367747968.from_dict(obj["base64"]) if obj.get("base64") is not None else None,
            "eden-ai": PydanticMainOcridentityParserIdentityParserDataClass94559367751728.from_dict(obj["eden-ai"]) if obj.get("eden-ai") is not None else None
        })
        return _obj


