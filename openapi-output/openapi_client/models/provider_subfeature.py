# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.feature import Feature
from openapi_client.models.pricing_serialzier import PricingSerialzier
from openapi_client.models.provider import Provider
from openapi_client.models.provider_subfeature_languages_inner import ProviderSubfeatureLanguagesInner
from openapi_client.models.subfeature import Subfeature
from typing import Optional, Set
from typing_extensions import Self

class ProviderSubfeature(BaseModel):
    """
    ProviderSubfeature
    """ # noqa: E501
    name: StrictStr
    version: StrictStr
    pricings: List[PricingSerialzier]
    is_working: Optional[StrictBool] = None
    description_title: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    description_content: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = None
    provider: Provider
    feature: Feature
    subfeature: Subfeature
    constraints: Dict[str, Any]
    models: Dict[str, Any]
    languages: List[ProviderSubfeatureLanguagesInner]
    phase: StrictStr
    __properties: ClassVar[List[str]] = ["name", "version", "pricings", "is_working", "description_title", "description_content", "provider", "feature", "subfeature", "constraints", "models", "languages", "phase"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProviderSubfeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "version",
            "constraints",
            "models",
            "languages",
            "phase",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pricings (list)
        _items = []
        if self.pricings:
            for _item in self.pricings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pricings'] = _items
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature
        if self.feature:
            _dict['feature'] = self.feature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subfeature
        if self.subfeature:
            _dict['subfeature'] = self.subfeature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in languages (list)
        _items = []
        if self.languages:
            for _item in self.languages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['languages'] = _items
        # set to None if description_title (nullable) is None
        # and model_fields_set contains the field
        if self.description_title is None and "description_title" in self.model_fields_set:
            _dict['description_title'] = None

        # set to None if description_content (nullable) is None
        # and model_fields_set contains the field
        if self.description_content is None and "description_content" in self.model_fields_set:
            _dict['description_content'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProviderSubfeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "pricings": [PricingSerialzier.from_dict(_item) for _item in obj["pricings"]] if obj.get("pricings") is not None else None,
            "is_working": obj.get("is_working"),
            "description_title": obj.get("description_title"),
            "description_content": obj.get("description_content"),
            "provider": Provider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "feature": Feature.from_dict(obj["feature"]) if obj.get("feature") is not None else None,
            "subfeature": Subfeature.from_dict(obj["subfeature"]) if obj.get("subfeature") is not None else None,
            "constraints": obj.get("constraints"),
            "models": obj.get("models"),
            "languages": [ProviderSubfeatureLanguagesInner.from_dict(_item) for _item in obj["languages"]] if obj.get("languages") is not None else None,
            "phase": obj.get("phase")
        })
        return _obj


