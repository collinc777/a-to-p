# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368819968 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368819968
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368825952 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368825952
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368829120 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368829120
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368832832 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368832832
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368838848 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368838848
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368856448 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368856448
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368860752 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368860752
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368865664 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368865664
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368869968 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368869968
from openapi_client.models.pydantic_main_textkeyword_extraction_keyword_extraction_data_class94559368874272 import PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368874272
from typing import Optional, Set
from typing_extensions import Self

class TextkeywordExtractionResponseModel(BaseModel):
    """
    TextkeywordExtractionResponseModel
    """ # noqa: E501
    tenstorrent: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368819968] = None
    microsoft: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368838848] = None
    ibm: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368825952] = None
    emvista: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368829120] = None
    oneai: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368832832] = None
    amazon: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368856448] = None
    nlpcloud: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368860752] = None
    openai: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368865664] = None
    corticalio: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368869968] = None
    eden_ai: Optional[PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368874272] = Field(default=None, alias="eden-ai")
    __properties: ClassVar[List[str]] = ["tenstorrent", "microsoft", "ibm", "emvista", "oneai", "amazon", "nlpcloud", "openai", "corticalio", "eden-ai"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextkeywordExtractionResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tenstorrent
        if self.tenstorrent:
            _dict['tenstorrent'] = self.tenstorrent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft
        if self.microsoft:
            _dict['microsoft'] = self.microsoft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ibm
        if self.ibm:
            _dict['ibm'] = self.ibm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of emvista
        if self.emvista:
            _dict['emvista'] = self.emvista.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oneai
        if self.oneai:
            _dict['oneai'] = self.oneai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon
        if self.amazon:
            _dict['amazon'] = self.amazon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nlpcloud
        if self.nlpcloud:
            _dict['nlpcloud'] = self.nlpcloud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of openai
        if self.openai:
            _dict['openai'] = self.openai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of corticalio
        if self.corticalio:
            _dict['corticalio'] = self.corticalio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eden_ai
        if self.eden_ai:
            _dict['eden-ai'] = self.eden_ai.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextkeywordExtractionResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenstorrent": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368819968.from_dict(obj["tenstorrent"]) if obj.get("tenstorrent") is not None else None,
            "microsoft": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368838848.from_dict(obj["microsoft"]) if obj.get("microsoft") is not None else None,
            "ibm": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368825952.from_dict(obj["ibm"]) if obj.get("ibm") is not None else None,
            "emvista": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368829120.from_dict(obj["emvista"]) if obj.get("emvista") is not None else None,
            "oneai": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368832832.from_dict(obj["oneai"]) if obj.get("oneai") is not None else None,
            "amazon": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368856448.from_dict(obj["amazon"]) if obj.get("amazon") is not None else None,
            "nlpcloud": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368860752.from_dict(obj["nlpcloud"]) if obj.get("nlpcloud") is not None else None,
            "openai": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368865664.from_dict(obj["openai"]) if obj.get("openai") is not None else None,
            "corticalio": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368869968.from_dict(obj["corticalio"]) if obj.get("corticalio") is not None else None,
            "eden-ai": PydanticMainTextkeywordExtractionKeywordExtractionDataClass94559368874272.from_dict(obj["eden-ai"]) if obj.get("eden-ai") is not None else None
        })
        return _obj


