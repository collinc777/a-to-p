# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.infos_invoice_parser_data_class import InfosInvoiceParserDataClass

class TestInfosInvoiceParserDataClass(unittest.TestCase):
    """InfosInvoiceParserDataClass unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InfosInvoiceParserDataClass:
        """Test InfosInvoiceParserDataClass
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InfosInvoiceParserDataClass`
        """
        model = InfosInvoiceParserDataClass()
        if include_optional:
            return InfosInvoiceParserDataClass(
                customer_information = openapi_client.models.customer_information_invoice.CustomerInformationInvoice(
                    customer_name = '', 
                    customer_address = '', 
                    customer_email = '', 
                    customer_id = '', 
                    customer_tax_id = '', 
                    customer_mailing_address = '', 
                    customer_billing_address = '', 
                    customer_shipping_address = '', 
                    customer_service_address = '', 
                    customer_remittance_address = '', 
                    abn_number = '', 
                    gst_number = '', 
                    pan_number = '', 
                    vat_number = '', 
                    siret_number = '', 
                    siren_number = '', ),
                merchant_information = openapi_client.models.merchant_information_invoice.MerchantInformationInvoice(
                    merchant_name = '', 
                    merchant_address = '', 
                    merchant_phone = '', 
                    merchant_email = '', 
                    merchant_fax = '', 
                    merchant_website = '', 
                    merchant_tax_id = '', 
                    merchant_siret = '', 
                    merchant_siren = '', 
                    abn_number = '', 
                    gst_number = '', 
                    pan_number = '', 
                    vat_number = '', ),
                invoice_number = '',
                invoice_total = 56,
                invoice_subtotal = 56,
                gratuity = 56,
                amount_due = 56,
                previous_unpaid_balance = 56,
                discount = 56,
                taxes = [
                    openapi_client.models.taxes_invoice.TaxesInvoice(
                        value = 56, 
                        rate = 56, )
                    ],
                service_charge = 56,
                payment_term = '',
                purchase_order = '',
                var_date = '',
                due_date = '',
                service_date = '',
                service_due_date = '',
                po_number = '',
                locale = openapi_client.models.locale_invoice.LocaleInvoice(
                    currency = '', 
                    language = '', ),
                bank_informations = openapi_client.models.bank_invoice.BankInvoice(
                    account_number = '', 
                    iban = '', 
                    bsb = '', 
                    sort_code = '', 
                    vat_number = '', 
                    rooting_number = '', 
                    swift = '', ),
                item_lines = [
                    openapi_client.models.item_lines_invoice.ItemLinesInvoice(
                        description = '', 
                        quantity = 56, 
                        amount = 56, 
                        unit_price = 56, 
                        discount = 56, 
                        product_code = '', 
                        date_item = '', 
                        tax_item = 56, 
                        tax_rate = 56, )
                    ]
            )
        else:
            return InfosInvoiceParserDataClass(
        )
        """

    def testInfosInvoiceParserDataClass(self):
        """Test InfosInvoiceParserDataClass"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
