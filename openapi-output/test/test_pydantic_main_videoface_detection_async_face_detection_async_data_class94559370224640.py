# coding: utf-8

"""
    Eden AI

    Your project description

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pydantic_main_videoface_detection_async_face_detection_async_data_class94559370224640 import PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640

class TestPydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640(unittest.TestCase):
    """PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640:
        """Test PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640`
        """
        model = PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640()
        if include_optional:
            return PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640(
                faces = [
                    openapi_client.models.video_face.VideoFace(
                        offset = 56, 
                        bounding_box = openapi_client.models.video_bounding_box.VideoBoundingBox(
                            top = 56, 
                            left = 56, 
                            height = 56, 
                            width = 56, ), 
                        attributes = openapi_client.models.face_attributes.FaceAttributes(
                            headwear = 56, 
                            frontal_gaze = 56, 
                            eyes_visible = 56, 
                            glasses = 56, 
                            mouth_open = 56, 
                            smiling = 56, 
                            brightness = 56, 
                            sharpness = 56, 
                            pose = openapi_client.models.video_face_poses.VideoFacePoses(
                                pitch = 56, 
                                roll = 56, 
                                yawn = 56, ), ), 
                        landmarks = openapi_client.models.landmarks_video.LandmarksVideo(
                            eye_left = [
                                56
                                ], 
                            eye_right = [
                                56
                                ], 
                            nose = [
                                56
                                ], 
                            mouth_left = [
                                56
                                ], 
                            mouth_right = [
                                56
                                ], ), )
                    ],
                original_response = None,
                id = '',
                final_status = 'success',
                error = openapi_client.models.error.Error()
            )
        else:
            return PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640(
                id = '',
                final_status = 'success',
        )
        """

    def testPydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640(self):
        """Test PydanticMainVideofaceDetectionAsyncFaceDetectionAsyncDataClass94559370224640"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
