# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool
from openapi_client.models.automl_classification_list_projects_response import (
    AutomlClassificationListProjectsResponse,
)
from openapi_client.models.imageautoml_classification_response_model import (
    ImageautomlClassificationResponseModel,
)
from openapi_client.models.imageautoml_classificationcreate_project_automl_classification_create_project_request import (
    ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest,
)
from openapi_client.models.imageautoml_classificationdelete_project_automl_classification_delete_request import (
    ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest,
)
from openapi_client.models.launch_async_job_response import LaunchAsyncJobResponse
from openapi_client.models.list_async_job_response import ListAsyncJobResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AutomlClassificationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def image_image_automl_classification_create_project_create(
        self,
        imageautoml_classificationcreate_project_automl_classification_create_project_request: ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageautomlClassificationResponseModel:
        """Automl Classification - Create Project

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param imageautoml_classificationcreate_project_automl_classification_create_project_request: (required)
        :type imageautoml_classificationcreate_project_automl_classification_create_project_request: ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_create_project_create_serialize(
            imageautoml_classificationcreate_project_automl_classification_create_project_request=imageautoml_classificationcreate_project_automl_classification_create_project_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_create_project_create_with_http_info(
        self,
        imageautoml_classificationcreate_project_automl_classification_create_project_request: ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageautomlClassificationResponseModel]:
        """Automl Classification - Create Project

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param imageautoml_classificationcreate_project_automl_classification_create_project_request: (required)
        :type imageautoml_classificationcreate_project_automl_classification_create_project_request: ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_create_project_create_serialize(
            imageautoml_classificationcreate_project_automl_classification_create_project_request=imageautoml_classificationcreate_project_automl_classification_create_project_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_create_project_create_without_preload_content(
        self,
        imageautoml_classificationcreate_project_automl_classification_create_project_request: ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification - Create Project

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param imageautoml_classificationcreate_project_automl_classification_create_project_request: (required)
        :type imageautoml_classificationcreate_project_automl_classification_create_project_request: ImageautomlClassificationcreateProjectAutomlClassificationCreateProjectRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_create_project_create_serialize(
            imageautoml_classificationcreate_project_automl_classification_create_project_request=imageautoml_classificationcreate_project_automl_classification_create_project_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_create_project_create_serialize(
        self,
        imageautoml_classificationcreate_project_automl_classification_create_project_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if (
            imageautoml_classificationcreate_project_automl_classification_create_project_request
            is not None
        ):
            _body_params = imageautoml_classificationcreate_project_automl_classification_create_project_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/automl_classification/create_project",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_delete_project_create(
        self,
        imageautoml_classificationdelete_project_automl_classification_delete_request: ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageautomlClassificationResponseModel:
        """Automl Classification - Delete Project

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param imageautoml_classificationdelete_project_automl_classification_delete_request: (required)
        :type imageautoml_classificationdelete_project_automl_classification_delete_request: ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_delete_project_create_serialize(
            imageautoml_classificationdelete_project_automl_classification_delete_request=imageautoml_classificationdelete_project_automl_classification_delete_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_delete_project_create_with_http_info(
        self,
        imageautoml_classificationdelete_project_automl_classification_delete_request: ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageautomlClassificationResponseModel]:
        """Automl Classification - Delete Project

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param imageautoml_classificationdelete_project_automl_classification_delete_request: (required)
        :type imageautoml_classificationdelete_project_automl_classification_delete_request: ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_delete_project_create_serialize(
            imageautoml_classificationdelete_project_automl_classification_delete_request=imageautoml_classificationdelete_project_automl_classification_delete_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_delete_project_create_without_preload_content(
        self,
        imageautoml_classificationdelete_project_automl_classification_delete_request: ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification - Delete Project

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param imageautoml_classificationdelete_project_automl_classification_delete_request: (required)
        :type imageautoml_classificationdelete_project_automl_classification_delete_request: ImageautomlClassificationdeleteProjectAutomlClassificationDeleteRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_delete_project_create_serialize(
            imageautoml_classificationdelete_project_automl_classification_delete_request=imageautoml_classificationdelete_project_automl_classification_delete_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_delete_project_create_serialize(
        self,
        imageautoml_classificationdelete_project_automl_classification_delete_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if (
            imageautoml_classificationdelete_project_automl_classification_delete_request
            is not None
        ):
            _body_params = imageautoml_classificationdelete_project_automl_classification_delete_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/automl_classification/delete_project",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_list_projects_retrieve(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AutomlClassificationListProjectsResponse:
        """Automl Classification - List Projects

        List Automl Classification Projects

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_list_projects_retrieve_serialize(
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AutomlClassificationListProjectsResponse",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_list_projects_retrieve_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AutomlClassificationListProjectsResponse]:
        """Automl Classification - List Projects

        List Automl Classification Projects

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_list_projects_retrieve_serialize(
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AutomlClassificationListProjectsResponse",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_list_projects_retrieve_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification - List Projects

        List Automl Classification Projects

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_list_projects_retrieve_serialize(
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AutomlClassificationListProjectsResponse",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_list_projects_retrieve_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/list_projects",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_predict_async_create(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[
                Union[
                    Annotated[bytes, Field(strict=True)],
                    Annotated[str, Field(strict=True)],
                ]
            ],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchAsyncJobResponse:
        """Automl Classification Predict Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|0.005 (per 1 request)|1 request   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_predict_async_create_serialize(
            providers=providers,
            project_id=project_id,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            file=file,
            file_url=file_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_predict_async_create_with_http_info(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[
                Union[
                    Annotated[bytes, Field(strict=True)],
                    Annotated[str, Field(strict=True)],
                ]
            ],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchAsyncJobResponse]:
        """Automl Classification Predict Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|0.005 (per 1 request)|1 request   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_predict_async_create_serialize(
            providers=providers,
            project_id=project_id,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            file=file,
            file_url=file_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_predict_async_create_without_preload_content(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[
                Union[
                    Annotated[bytes, Field(strict=True)],
                    Annotated[str, Field(strict=True)],
                ]
            ],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification Predict Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|0.005 (per 1 request)|1 request   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_predict_async_create_serialize(
            providers=providers,
            project_id=project_id,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            file=file,
            file_url=file_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_predict_async_create_serialize(
        self,
        providers,
        project_id,
        fallback_providers,
        show_original_response,
        webhook_receiver,
        users_webhook_parameters,
        file,
        file_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if providers is not None:
            _form_params.append(("providers", providers))
        if fallback_providers is not None:
            _form_params.append(("fallback_providers", fallback_providers))
        if show_original_response is not None:
            _form_params.append(("show_original_response", show_original_response))
        if webhook_receiver is not None:
            _form_params.append(("webhook_receiver", webhook_receiver))
        if users_webhook_parameters is not None:
            _form_params.append(("users_webhook_parameters", users_webhook_parameters))
        if project_id is not None:
            _form_params.append(("project_id", project_id))
        if file is not None:
            _files["file"] = file
        if file_url is not None:
            _form_params.append(("file_url", file_url))
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["multipart/form-data", "application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/automl_classification/predict_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_predict_async_retrieve(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListAsyncJobResponse:
        """Automl Classification Predict List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_predict_async_retrieve_serialize(
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_predict_async_retrieve_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListAsyncJobResponse]:
        """Automl Classification Predict List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_predict_async_retrieve_serialize(
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_predict_async_retrieve_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification Predict List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_predict_async_retrieve_serialize(
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_predict_async_retrieve_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/predict_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_predict_async_retrieve2(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageautomlClassificationResponseModel:
        """Automl Classification - Predict Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_predict_async_retrieve2_serialize(
                public_id=public_id,
                response_as_dict=response_as_dict,
                show_original_response=show_original_response,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_predict_async_retrieve2_with_http_info(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageautomlClassificationResponseModel]:
        """Automl Classification - Predict Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_predict_async_retrieve2_serialize(
                public_id=public_id,
                response_as_dict=response_as_dict,
                show_original_response=show_original_response,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_predict_async_retrieve2_without_preload_content(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification - Predict Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_predict_async_retrieve2_serialize(
                public_id=public_id,
                response_as_dict=response_as_dict,
                show_original_response=show_original_response,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_predict_async_retrieve2_serialize(
        self,
        public_id,
        response_as_dict,
        show_original_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if public_id is not None:
            _path_params["public_id"] = public_id
        # process the query parameters
        if response_as_dict is not None:
            _query_params.append(("response_as_dict", response_as_dict))

        if show_original_response is not None:
            _query_params.append(("show_original_response", show_original_response))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/predict_async/{public_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_train_async_create(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchAsyncJobResponse:
        """Automl Classification Train Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_train_async_create_serialize(
            providers=providers,
            project_id=project_id,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_train_async_create_with_http_info(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchAsyncJobResponse]:
        """Automl Classification Train Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_train_async_create_serialize(
            providers=providers,
            project_id=project_id,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_train_async_create_without_preload_content(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification Train Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|free|-   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_train_async_create_serialize(
            providers=providers,
            project_id=project_id,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_train_async_create_serialize(
        self,
        providers,
        project_id,
        fallback_providers,
        show_original_response,
        webhook_receiver,
        users_webhook_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if providers is not None:
            _form_params.append(("providers", providers))
        if fallback_providers is not None:
            _form_params.append(("fallback_providers", fallback_providers))
        if show_original_response is not None:
            _form_params.append(("show_original_response", show_original_response))
        if webhook_receiver is not None:
            _form_params.append(("webhook_receiver", webhook_receiver))
        if users_webhook_parameters is not None:
            _form_params.append(("users_webhook_parameters", users_webhook_parameters))
        if project_id is not None:
            _form_params.append(("project_id", project_id))
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["multipart/form-data", "application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/automl_classification/train_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_train_async_retrieve(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListAsyncJobResponse:
        """Automl Classification Train List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_train_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_train_async_retrieve_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListAsyncJobResponse]:
        """Automl Classification Train List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_train_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_train_async_retrieve_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification Train List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_train_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_train_async_retrieve_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/train_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_train_async_retrieve2(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageautomlClassificationResponseModel:
        """Automl Classification - Train Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_train_async_retrieve2_serialize(
                public_id=public_id,
                response_as_dict=response_as_dict,
                show_original_response=show_original_response,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_train_async_retrieve2_with_http_info(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageautomlClassificationResponseModel]:
        """Automl Classification - Train Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_train_async_retrieve2_serialize(
                public_id=public_id,
                response_as_dict=response_as_dict,
                show_original_response=show_original_response,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_train_async_retrieve2_without_preload_content(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification - Train Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_train_async_retrieve2_serialize(
                public_id=public_id,
                response_as_dict=response_as_dict,
                show_original_response=show_original_response,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_train_async_retrieve2_serialize(
        self,
        public_id,
        response_as_dict,
        show_original_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if public_id is not None:
            _path_params["public_id"] = public_id
        # process the query parameters
        if response_as_dict is not None:
            _query_params.append(("response_as_dict", response_as_dict))

        if show_original_response is not None:
            _query_params.append(("show_original_response", show_original_response))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/train_async/{public_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_upload_data_async_create(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        label: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=200,
                description="Label of the image",
            ),
        ],
        type_of_data: Annotated[
            Any,
            Field(
                description="Type of data : TRAINING or TEST  * `TRAINING` - TRAINING * `TEST` - TEST"
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[
                Union[
                    Annotated[bytes, Field(strict=True)],
                    Annotated[str, Field(strict=True)],
                ]
            ],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchAsyncJobResponse:
        """Automl Classification Upload Data Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|0.0005 (per 1 file)|1 file   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param label: Label of the image (required)
        :type label: str
        :param type_of_data: Type of data : TRAINING or TEST  * `TRAINING` - TRAINING * `TEST` - TEST (required)
        :type type_of_data: TypeOfDataEnum
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_upload_data_async_create_serialize(
                providers=providers,
                project_id=project_id,
                label=label,
                type_of_data=type_of_data,
                fallback_providers=fallback_providers,
                show_original_response=show_original_response,
                webhook_receiver=webhook_receiver,
                users_webhook_parameters=users_webhook_parameters,
                file=file,
                file_url=file_url,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_upload_data_async_create_with_http_info(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        label: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=200,
                description="Label of the image",
            ),
        ],
        type_of_data: Annotated[
            Any,
            Field(
                description="Type of data : TRAINING or TEST  * `TRAINING` - TRAINING * `TEST` - TEST"
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[
                Union[
                    Annotated[bytes, Field(strict=True)],
                    Annotated[str, Field(strict=True)],
                ]
            ],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchAsyncJobResponse]:
        """Automl Classification Upload Data Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|0.0005 (per 1 file)|1 file   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param label: Label of the image (required)
        :type label: str
        :param type_of_data: Type of data : TRAINING or TEST  * `TRAINING` - TRAINING * `TEST` - TEST (required)
        :type type_of_data: TypeOfDataEnum
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_upload_data_async_create_serialize(
                providers=providers,
                project_id=project_id,
                label=label,
                type_of_data=type_of_data,
                fallback_providers=fallback_providers,
                show_original_response=show_original_response,
                webhook_receiver=webhook_receiver,
                users_webhook_parameters=users_webhook_parameters,
                file=file,
                file_url=file_url,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_upload_data_async_create_without_preload_content(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        project_id: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=250,
                description="The id of project",
            ),
        ],
        label: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                max_length=200,
                description="Label of the image",
            ),
        ],
        type_of_data: Annotated[
            Any,
            Field(
                description="Type of data : TRAINING or TEST  * `TRAINING` - TRAINING * `TEST` - TEST"
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[
                Union[
                    Annotated[bytes, Field(strict=True)],
                    Annotated[str, Field(strict=True)],
                ]
            ],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification Upload Data Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**nyckel**|`v1.0.0`|0.0005 (per 1 file)|1 file   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param project_id: The id of project (required)
        :type project_id: str
        :param label: Label of the image (required)
        :type label: str
        :param type_of_data: Type of data : TRAINING or TEST  * `TRAINING` - TRAINING * `TEST` - TEST (required)
        :type type_of_data: TypeOfDataEnum
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = (
            self._image_image_automl_classification_upload_data_async_create_serialize(
                providers=providers,
                project_id=project_id,
                label=label,
                type_of_data=type_of_data,
                fallback_providers=fallback_providers,
                show_original_response=show_original_response,
                webhook_receiver=webhook_receiver,
                users_webhook_parameters=users_webhook_parameters,
                file=file,
                file_url=file_url,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_upload_data_async_create_serialize(
        self,
        providers,
        project_id,
        label,
        type_of_data,
        fallback_providers,
        show_original_response,
        webhook_receiver,
        users_webhook_parameters,
        file,
        file_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if providers is not None:
            _form_params.append(("providers", providers))
        if fallback_providers is not None:
            _form_params.append(("fallback_providers", fallback_providers))
        if show_original_response is not None:
            _form_params.append(("show_original_response", show_original_response))
        if webhook_receiver is not None:
            _form_params.append(("webhook_receiver", webhook_receiver))
        if users_webhook_parameters is not None:
            _form_params.append(("users_webhook_parameters", users_webhook_parameters))
        if project_id is not None:
            _form_params.append(("project_id", project_id))
        if label is not None:
            _form_params.append(("label", label))
        if type_of_data is not None:
            _form_params.append(("type_of_data", type_of_data))
        if file is not None:
            _files["file"] = file
        if file_url is not None:
            _form_params.append(("file_url", file_url))
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["multipart/form-data", "application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/automl_classification/upload_data_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_upload_data_async_retrieve(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListAsyncJobResponse:
        """Automl Classification Upload Data List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_upload_data_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_upload_data_async_retrieve_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListAsyncJobResponse]:
        """Automl Classification Upload Data List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_upload_data_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_upload_data_async_retrieve_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification Upload Data List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_upload_data_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_upload_data_async_retrieve_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/upload_data_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_automl_classification_upload_data_async_retrieve2(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageautomlClassificationResponseModel:
        """Automl Classification - Upload Data Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_upload_data_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_automl_classification_upload_data_async_retrieve2_with_http_info(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageautomlClassificationResponseModel]:
        """Automl Classification - Upload Data Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_upload_data_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_automl_classification_upload_data_async_retrieve2_without_preload_content(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Automl Classification - Upload Data Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_automl_classification_upload_data_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImageautomlClassificationResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_automl_classification_upload_data_async_retrieve2_serialize(
        self,
        public_id,
        response_as_dict,
        show_original_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if public_id is not None:
            _path_params["public_id"] = public_id
        # process the query parameters
        if response_as_dict is not None:
            _query_params.append(("response_as_dict", response_as_dict))

        if show_original_response is not None:
            _query_params.append(("show_original_response", show_original_response))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/automl_classification/upload_data_async/{public_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
