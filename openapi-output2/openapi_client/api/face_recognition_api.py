# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool
from openapi_client.models.imageface_recognition_response_model import (
    ImagefaceRecognitionResponseModel,
)
from openapi_client.models.imageface_recognitiondelete_face_face_recognition_delete_face_request import (
    ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest,
)
from openapi_client.models.imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request import (
    ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
)

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FaceRecognitionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def image_image_face_recognition_add_face_create(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagefaceRecognitionResponseModel:
        """Face Recognition - Add Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>

        :param imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: (required)
        :type imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_add_face_create_serialize(
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request=imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_face_recognition_add_face_create_with_http_info(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagefaceRecognitionResponseModel]:
        """Face Recognition - Add Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>

        :param imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: (required)
        :type imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_add_face_create_serialize(
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request=imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_face_recognition_add_face_create_without_preload_content(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Face Recognition - Add Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|0.6 (per 1000 request)|1 request   </details>

        :param imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: (required)
        :type imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_add_face_create_serialize(
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request=imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_face_recognition_add_face_create_serialize(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if (
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request
            is not None
        ):
            _body_params = imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/face_recognition/add_face",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_face_recognition_delete_face_create(
        self,
        imageface_recognitiondelete_face_face_recognition_delete_face_request: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagefaceRecognitionResponseModel:
        """Face Recognition - Delete Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>

        :param imageface_recognitiondelete_face_face_recognition_delete_face_request: (required)
        :type imageface_recognitiondelete_face_face_recognition_delete_face_request: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_delete_face_create_serialize(
            imageface_recognitiondelete_face_face_recognition_delete_face_request=imageface_recognitiondelete_face_face_recognition_delete_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_face_recognition_delete_face_create_with_http_info(
        self,
        imageface_recognitiondelete_face_face_recognition_delete_face_request: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagefaceRecognitionResponseModel]:
        """Face Recognition - Delete Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>

        :param imageface_recognitiondelete_face_face_recognition_delete_face_request: (required)
        :type imageface_recognitiondelete_face_face_recognition_delete_face_request: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_delete_face_create_serialize(
            imageface_recognitiondelete_face_face_recognition_delete_face_request=imageface_recognitiondelete_face_face_recognition_delete_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_face_recognition_delete_face_create_without_preload_content(
        self,
        imageface_recognitiondelete_face_face_recognition_delete_face_request: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Face Recognition - Delete Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>

        :param imageface_recognitiondelete_face_face_recognition_delete_face_request: (required)
        :type imageface_recognitiondelete_face_face_recognition_delete_face_request: ImagefaceRecognitiondeleteFaceFaceRecognitionDeleteFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_delete_face_create_serialize(
            imageface_recognitiondelete_face_face_recognition_delete_face_request=imageface_recognitiondelete_face_face_recognition_delete_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_face_recognition_delete_face_create_serialize(
        self,
        imageface_recognitiondelete_face_face_recognition_delete_face_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if (
            imageface_recognitiondelete_face_face_recognition_delete_face_request
            is not None
        ):
            _body_params = (
                imageface_recognitiondelete_face_face_recognition_delete_face_request
            )

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/face_recognition/delete_face",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_face_recognition_list_faces_retrieve(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        attributes_as_list: Annotated[
            Optional[StrictBool],
            Field(
                description='Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{"attribute_1": "x1","attribute_2": "y2"}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ "attribute_1": ["x1","x2", ...], "attribute_2": [y1, y2, ...]}``` '
            ),
        ] = None,
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        response_as_dict: Annotated[
            Optional[StrictBool],
            Field(
                description='Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {"google" : { "status": "success", ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{"status": "success", "provider": "google" ... }, ] ```. <br>                   '
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagefaceRecognitionResponseModel:
        """Face Recognition - List Faces

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param attributes_as_list: Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}```
        :type attributes_as_list: bool
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param response_as_dict: Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>
        :type response_as_dict: bool
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_list_faces_retrieve_serialize(
            providers=providers,
            attributes_as_list=attributes_as_list,
            fallback_providers=fallback_providers,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_face_recognition_list_faces_retrieve_with_http_info(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        attributes_as_list: Annotated[
            Optional[StrictBool],
            Field(
                description='Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{"attribute_1": "x1","attribute_2": "y2"}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ "attribute_1": ["x1","x2", ...], "attribute_2": [y1, y2, ...]}``` '
            ),
        ] = None,
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        response_as_dict: Annotated[
            Optional[StrictBool],
            Field(
                description='Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {"google" : { "status": "success", ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{"status": "success", "provider": "google" ... }, ] ```. <br>                   '
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagefaceRecognitionResponseModel]:
        """Face Recognition - List Faces

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param attributes_as_list: Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}```
        :type attributes_as_list: bool
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param response_as_dict: Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>
        :type response_as_dict: bool
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_list_faces_retrieve_serialize(
            providers=providers,
            attributes_as_list=attributes_as_list,
            fallback_providers=fallback_providers,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_face_recognition_list_faces_retrieve_without_preload_content(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        attributes_as_list: Annotated[
            Optional[StrictBool],
            Field(
                description='Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{\'items\': [{"attribute_1": "x1","attribute_2": "y2"}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ "attribute_1": ["x1","x2", ...], "attribute_2": [y1, y2, ...]}``` '
            ),
        ] = None,
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        response_as_dict: Annotated[
            Optional[StrictBool],
            Field(
                description='Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {"google" : { "status": "success", ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{"status": "success", "provider": "google" ... }, ] ```. <br>                   '
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Face Recognition - List Faces

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|free|- |**facepp**|`v3`|0.1 (per 1000 request)|1 request   </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param attributes_as_list: Optional : When set to **false** (default) the structure of the extracted items is list of objects having different attributes : <br>      ```{'items': [{\"attribute_1\": \"x1\",\"attribute_2\": \"y2\"}, ... ]}``` <br>      When it is set to **true**, the response contains an object with each attribute as a list : <br>      ```{ \"attribute_1\": [\"x1\",\"x2\", ...], \"attribute_2\": [y1, y2, ...]}```
        :type attributes_as_list: bool
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param response_as_dict: Optional : When set to **true** (default), the response is an object of responses with providers names as keys : <br>                    ``` {\"google\" : { \"status\": \"success\", ... }, } ``` <br>                 When set to **false** the response structure is a list of response objects : <br>                     ``` [{\"status\": \"success\", \"provider\": \"google\" ... }, ] ```. <br>
        :type response_as_dict: bool
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_list_faces_retrieve_serialize(
            providers=providers,
            attributes_as_list=attributes_as_list,
            fallback_providers=fallback_providers,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_face_recognition_list_faces_retrieve_serialize(
        self,
        providers,
        attributes_as_list,
        fallback_providers,
        response_as_dict,
        show_original_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if attributes_as_list is not None:
            _query_params.append(("attributes_as_list", attributes_as_list))

        if fallback_providers is not None:
            _query_params.append(("fallback_providers", fallback_providers))

        if providers is not None:
            _query_params.append(("providers", providers))

        if response_as_dict is not None:
            _query_params.append(("response_as_dict", response_as_dict))

        if show_original_response is not None:
            _query_params.append(("show_original_response", show_original_response))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/image/face_recognition/list_faces",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def image_image_face_recognition_recognize_create(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagefaceRecognitionResponseModel:
        """Face Recognition - Recognize Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>

        :param imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: (required)
        :type imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_recognize_create_serialize(
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request=imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def image_image_face_recognition_recognize_create_with_http_info(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagefaceRecognitionResponseModel]:
        """Face Recognition - Recognize Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>

        :param imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: (required)
        :type imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_recognize_create_serialize(
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request=imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def image_image_face_recognition_recognize_create_without_preload_content(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Face Recognition - Recognize Face

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 1.26.8`|1.0 (per 1000 file)|1 file |**facepp**|`v3`|2.0 (per 1000 request)|1 request   </details>

        :param imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: (required)
        :type imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request: ImagefaceRecognitionrecognizeimagefaceRecognitionaddFaceFaceRecognitionDetectFaceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._image_image_face_recognition_recognize_create_serialize(
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request=imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ImagefaceRecognitionResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _image_image_face_recognition_recognize_create_serialize(
        self,
        imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if (
            imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request
            is not None
        ):
            _body_params = imageface_recognitionrecognizeimageface_recognitionadd_face_face_recognition_detect_face_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/image/face_recognition/recognize",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
