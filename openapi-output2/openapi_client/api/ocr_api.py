# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from openapi_client.models.ocrocr_ocr_request import OcrocrOcrRequest
from openapi_client.models.ocrocr_response_model import OcrocrResponseModel

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OcrApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def ocr_ocr_ocr_create(
        self,
        ocrocr_ocr_request: OcrocrOcrRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OcrocrResponseModel:
        """OCR

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K'iche'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>

        :param ocrocr_ocr_request: (required)
        :type ocrocr_ocr_request: OcrocrOcrRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_create_serialize(
            ocrocr_ocr_request=ocrocr_ocr_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "OcrocrResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def ocr_ocr_ocr_create_with_http_info(
        self,
        ocrocr_ocr_request: OcrocrOcrRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OcrocrResponseModel]:
        """OCR

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K'iche'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>

        :param ocrocr_ocr_request: (required)
        :type ocrocr_ocr_request: OcrocrOcrRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_create_serialize(
            ocrocr_ocr_request=ocrocr_ocr_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "OcrocrResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def ocr_ocr_ocr_create_without_preload_content(
        self,
        ocrocr_ocr_request: OcrocrOcrRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """OCR

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|1.5 (per 1000 page)|1 page |**clarifai**|`8.0.0`|2.0 (per 1000 page)|1 page |**google**|`v1`|1.5 (per 1000 page)|1 page |**microsoft**|`v3.2`|1.0 (per 1000 page)|1 page |**sentisight**|`v3.3.1`|1.0 (per 1000 file)|1 file |**api4ai**|`v1.0.0`|3.0 (per 1000 request)|1 request   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Abaza**|`abq`| |**Adyghe**|`ady`| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Assamese**|`as`| |**Asturian**|`ast`| |**Avaric**|`av`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bhojpuri**|`bho`| |**Bihari languages**|`bh`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chechen**|`ce`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dargwa**|`dar`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Goan Konkani**|`gom`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Ingush**|`inh`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K'iche'**|`quc`| |**Kabardian**|`kbd`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lak**|`lbe`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lezghian**|`lez`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Maithili**|`mai`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Marshallese**|`mh`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Newari**|`new`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Old English (ca. 450-1100)**|`ang`| |**Ossetian**|`os`| |**Pali**|`pi`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tabassaran**|`tab`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Arabic (Pseudo-Accents)**|`ar-XA`| |**Belarusian**|`be-cyrl`| |**Belarusian (Latin)**|`be-latn`| |**Chinese (China)**|`zh-CN`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Taiwan)**|`zh-TW`| |**Chinese (Traditional)**|`zh-Hant`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Netherlands)**|`nl-NL`| |**English (United States)**|`en-US`| |**Finnish (Finland)**|`fi-FI`| |**French (France)**|`fr-FR`| |**German (Germany)**|`de-DE`| |**Hungarian (Hungary)**|`hu-HU`| |**Italian (Italy)**|`it-IT`| |**Japanese (Japan)**|`ja-JP`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-cyrl`| |**Kazakh (Latin)**|`kk-latn`| |**Korean (South Korea)**|`ko-KR`| |**Kurdish (Arabic)**|`ku-arab`| |**Kurdish (Latin)**|`ku-latn`| |**Polish**|`pl-PO`| |**Portuguese (Portugal)**|`pt-PT`| |**Region: Czechia**|`cz-CZ`| |**Region: Greece**|`gr-GR`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Spanish (Spain)**|`es-ES`| |**Swedish (Sweden)**|`sv-SE`| |**Turkish (Turkey)**|`tr-TR`| |**Uzbek (Arabic)**|`uz-arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>

        :param ocrocr_ocr_request: (required)
        :type ocrocr_ocr_request: OcrocrOcrRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_create_serialize(
            ocrocr_ocr_request=ocrocr_ocr_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "OcrocrResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _ocr_ocr_ocr_create_serialize(
        self,
        ocrocr_ocr_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if ocrocr_ocr_request is not None:
            _body_params = ocrocr_ocr_request

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json", "multipart/form-data"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/ocr/ocr",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
