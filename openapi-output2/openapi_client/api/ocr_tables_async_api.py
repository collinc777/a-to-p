# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictBytes
from openapi_client.models.asyncocrocr_tables_async_response_model import (
    AsyncocrocrTablesAsyncResponseModel,
)
from openapi_client.models.launch_async_job_response import LaunchAsyncJobResponse
from openapi_client.models.list_async_job_response import ListAsyncJobResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OcrTablesAsyncApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def ocr_ocr_ocr_tables_async_create(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[Union[StrictBytes, StrictStr]],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        file_password: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=200)]],
            Field(description="If your PDF file has a password, you can pass it here!"),
        ] = None,
        language: Annotated[
            Optional[StrictStr],
            Field(
                description="Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchAsyncJobResponse:
        """OCR Tables Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|10.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K'iche'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param file_password: If your PDF file has a password, you can pass it here!
        :type file_password: str
        :param language: Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_create_serialize(
            providers=providers,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            file=file,
            file_url=file_url,
            file_password=file_password,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def ocr_ocr_ocr_tables_async_create_with_http_info(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[Union[StrictBytes, StrictStr]],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        file_password: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=200)]],
            Field(description="If your PDF file has a password, you can pass it here!"),
        ] = None,
        language: Annotated[
            Optional[StrictStr],
            Field(
                description="Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchAsyncJobResponse]:
        """OCR Tables Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|10.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K'iche'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param file_password: If your PDF file has a password, you can pass it here!
        :type file_password: str
        :param language: Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_create_serialize(
            providers=providers,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            file=file,
            file_url=file_url,
            file_password=file_password,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_create_without_preload_content(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        file: Annotated[
            Optional[Union[StrictBytes, StrictStr]],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        file_password: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=200)]],
            Field(description="If your PDF file has a password, you can pass it here!"),
        ] = None,
        language: Annotated[
            Optional[StrictStr],
            Field(
                description="Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """OCR Tables Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Version|Price|Billing unit| |----|-------|-----|------------| |**amazon**|`boto3 (v1.15.18)`|15.0 (per 1000 page)|1 page |**google**|`DocumentAI v1 beta3`|65.0 (per 1000 page)|1 page |**microsoft**|`rest API 3.0`|10.0 (per 1000 page)|1 page   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Angika**|`anp`| |**Arabic**|`ar`| |**Asturian**|`ast`| |**Awadhi**|`awa`| |**Azerbaijani**|`az`| |**Bagheli**|`bfy`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bhojpuri**|`bho`| |**Bislama**|`bi`| |**Bodo (India)**|`brx`| |**Bosnian**|`bs`| |**Braj**|`bra`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Bundeli**|`bns`| |**Buriat**|`bua`| |**Camling**|`rab`| |**Catalan**|`ca`| |**Cebuano**|`ceb`| |**Chamorro**|`ch`| |**Chhattisgarhi**|`hne`| |**Chinese**|`zh`| |**Cornish**|`kw`| |**Corsican**|`co`| |**Crimean Tatar**|`crh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dari**|`prs`| |**Dhimal**|`dhi`| |**Dogri (macrolanguage)**|`doi`| |**Dutch**|`nl`| |**English**|`en`| |**Erzya**|`myv`| |**Estonian**|`et`| |**Faroese**|`fo`| |**Fijian**|`fj`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Friulian**|`fur`| |**Gagauz**|`gag`| |**Galician**|`gl`| |**German**|`de`| |**Gilbertese**|`gil`| |**Gondi**|`gon`| |**Gurung**|`gvr`| |**Haitian**|`ht`| |**Halbi**|`hlb`| |**Hani**|`hni`| |**Haryanvi**|`bgc`| |**Hawaiian**|`haw`| |**Hindi**|`hi`| |**Hmong Daw**|`mww`| |**Ho**|`hoc`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Inari Sami**|`smn`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Inuktitut**|`iu`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Jaunsari**|`jns`| |**Javanese**|`jv`| |**K'iche'**|`quc`| |**Kabuverdianu**|`kea`| |**Kachin**|`kac`| |**Kalaallisut**|`kl`| |**Kangri**|`xnr`| |**Kara-Kalpak**|`kaa`| |**Karachay-Balkar**|`krc`| |**Kashubian**|`csb`| |**Kazakh**|`kk`| |**Khaling**|`klr`| |**Khasi**|`kha`| |**Kirghiz**|`ky`| |**Korean**|`ko`| |**Korku**|`kfq`| |**Koryak**|`kpy`| |**Kosraean**|`kos`| |**Kumarbhag Paharia**|`kmj`| |**Kumyk**|`kum`| |**Kurdish**|`ku`| |**Kurukh**|`kru`| |**Kölsch**|`ksh`| |**Lakota**|`lkt`| |**Latin**|`la`| |**Latvian**|`lv`| |**Lithuanian**|`lt`| |**Lower Sorbian**|`dsb`| |**Lule Sami**|`smj`| |**Luxembourgish**|`lb`| |**Mahasu Pahari**|`bfz`| |**Malay (macrolanguage)**|`ms`| |**Maltese**|`mt`| |**Manx**|`gv`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Mongolian**|`mn`| |**Neapolitan**|`nap`| |**Nepali (macrolanguage)**|`ne`| |**Niuean**|`niu`| |**Nogai**|`nog`| |**Northern Sami**|`se`| |**Norwegian**|`no`| |**Occitan (post 1500)**|`oc`| |**Ossetian**|`os`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`ro`| |**Romansh**|`rm`| |**Russian**|`ru`| |**Sadri**|`sck`| |**Samoan**|`sm`| |**Sanskrit**|`sa`| |**Santali**|`sat`| |**Scots**|`sco`| |**Scottish Gaelic**|`gd`| |**Serbian**|`sr`| |**Sherpa**|`xsr`| |**Sirmauri**|`srx`| |**Skolt Sami**|`sms`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Southern Sami**|`sma`| |**Spanish**|`es`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tajik**|`tg`| |**Tatar**|`tt`| |**Tetum**|`tet`| |**Thangmi**|`thf`| |**Tonga (Tonga Islands)**|`to`| |**Turkish**|`tr`| |**Turkmen**|`tk`| |**Tuvinian**|`tyv`| |**Uighur**|`ug`| |**Upper Sorbian**|`hsb`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Volapük**|`vo`| |**Walser**|`wae`| |**Welsh**|`cy`| |**Western Frisian**|`fy`| |**Yucateco**|`yua`| |**Zhuang**|`za`| |**Zulu**|`zu`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Belarusian**|`be-Cyrl`| |**Belarusian (Latin)**|`be-Latn`| |**Chinese (Simplified)**|`zh-Hans`| |**Chinese (Traditional)**|`zh-Hant`| |**Kara-Kalpak (Cyrillic)**|`kaa-Cyrl`| |**Kazakh**|`kk-Cyrl`| |**Kazakh (Latin)**|`kk-Latn`| |**Kurdish (Arabic)**|`ku-Arab`| |**Kurdish (Latin)**|`ku-Latn`| |**Serbian (Cyrillic)**|`sr-Cyrl`| |**Serbian (Cyrillic, Montenegro)**|`sr-Cyrl-ME`| |**Serbian (Latin)**|`sr-Latn`| |**Serbian (Latin, Montenegro)**|`sr-Latn-ME`| |**Serbian (Montenegro)**|`sr-ME`| |**Uzbek (Arabic)**|`uz-Arab`| |**Uzbek (Cyrillic)**|`uz-cyrl`|  </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param file_password: If your PDF file has a password, you can pass it here!
        :type file_password: str
        :param language: Language code of the language the document is written in (ex: fr (French), en (English), es (Spanish))
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_create_serialize(
            providers=providers,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            file=file,
            file_url=file_url,
            file_password=file_password,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _ocr_ocr_ocr_tables_async_create_serialize(
        self,
        providers,
        fallback_providers,
        show_original_response,
        webhook_receiver,
        users_webhook_parameters,
        file,
        file_url,
        file_password,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if providers is not None:
            _form_params.append(("providers", providers))
        if fallback_providers is not None:
            _form_params.append(("fallback_providers", fallback_providers))
        if show_original_response is not None:
            _form_params.append(("show_original_response", show_original_response))
        if webhook_receiver is not None:
            _form_params.append(("webhook_receiver", webhook_receiver))
        if users_webhook_parameters is not None:
            _form_params.append(("users_webhook_parameters", users_webhook_parameters))
        if file is not None:
            _files["file"] = file
        if file_url is not None:
            _form_params.append(("file_url", file_url))
        if file_password is not None:
            _form_params.append(("file_password", file_password))
        if language is not None:
            _form_params.append(("language", language))
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["multipart/form-data", "application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/ocr/ocr_tables_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_destroy(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """OCR Tables delete Jobs

        Generic class to handle method GET all async job for user  Attributes:     feature (str): EdenAI feature     subfeature (str): EdenAI subfeature

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_destroy_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def ocr_ocr_ocr_tables_async_destroy_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """OCR Tables delete Jobs

        Generic class to handle method GET all async job for user  Attributes:     feature (str): EdenAI feature     subfeature (str): EdenAI subfeature

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_destroy_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_destroy_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """OCR Tables delete Jobs

        Generic class to handle method GET all async job for user  Attributes:     feature (str): EdenAI feature     subfeature (str): EdenAI subfeature

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_destroy_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _ocr_ocr_ocr_tables_async_destroy_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/ocr/ocr_tables_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_retrieve(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListAsyncJobResponse:
        """OCR Tables List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def ocr_ocr_ocr_tables_async_retrieve_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListAsyncJobResponse]:
        """OCR Tables List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_retrieve_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """OCR Tables List Job

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _ocr_ocr_ocr_tables_async_retrieve_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/ocr/ocr_tables_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_retrieve2(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AsyncocrocrTablesAsyncResponseModel:
        """OCR Tables Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AsyncocrocrTablesAsyncResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def ocr_ocr_ocr_tables_async_retrieve2_with_http_info(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AsyncocrocrTablesAsyncResponseModel]:
        """OCR Tables Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AsyncocrocrTablesAsyncResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def ocr_ocr_ocr_tables_async_retrieve2_without_preload_content(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """OCR Tables Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._ocr_ocr_ocr_tables_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AsyncocrocrTablesAsyncResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _ocr_ocr_ocr_tables_async_retrieve2_serialize(
        self,
        public_id,
        response_as_dict,
        show_original_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if public_id is not None:
            _path_params["public_id"] = public_id
        # process the query parameters
        if response_as_dict is not None:
            _query_params.append(("response_as_dict", response_as_dict))

        if show_original_response is not None:
            _query_params.append(("show_original_response", show_original_response))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/ocr/ocr_tables_async/{public_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
