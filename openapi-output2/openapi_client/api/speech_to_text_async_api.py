# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictBytes
from openapi_client.models.asyncaudiospeech_to_text_async_response_model import (
    AsyncaudiospeechToTextAsyncResponseModel,
)
from openapi_client.models.launch_async_job_response import LaunchAsyncJobResponse
from openapi_client.models.list_async_job_response import ListAsyncJobResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SpeechToTextAsyncApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def audio_audio_speech_to_text_async_create(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        settings: Annotated[
            Optional[StrictStr],
            Field(
                description='A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\\"google\\" : \\"google_model\\", \\"ibm\\": \\"ibm_model\\"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      '
            ),
        ] = None,
        provider_params: Annotated[
            Optional[StrictStr],
            Field(
                description=' Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       \\"deepgram\\": {         \\"filler_words\\": true,         \\"smart_format\\": true,         \\"callback\\": \\"https://webhook.site/0000\\"       },       \\"assembly\\": {         \\"webhook_url\\": \\"https://webhook.site/0000\\"       }     }  Please refer to the documentation of each provider to see which parameters to send. '
            ),
        ] = None,
        file: Annotated[
            Optional[Union[StrictBytes, StrictStr]],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        language: Annotated[
            Optional[StrictStr],
            Field(description="Language code expected (ex: en, fr)"),
        ] = None,
        speakers: Annotated[
            Optional[StrictInt],
            Field(description="Number of speakers in the file audio"),
        ] = None,
        profanity_filter: Annotated[
            Optional[StrictBool],
            Field(
                description="Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks"
            ),
        ] = None,
        custom_vocabulary: Annotated[
            Optional[StrictStr],
            Field(
                description="List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)"
            ),
        ] = None,
        convert_to_wav: Annotated[
            Optional[StrictBool],
            Field(
                description="Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchAsyncJobResponse:
        """Speech to Text Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Model|Version|Price|Billing unit| |----|----|-------|-----|------------| |**amazon**|-|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|-|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|-|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|-|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|-|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|-|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|-|`v1`|0.0162 (per 60 seconde)|1 seconde |**neuralspace**|-|`v1`|0.024 (per 60 seconde)|60 seconde |**assembly**|-|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram**|**enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|-|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|**base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|-|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics**|**enhanced**|`v2`|0.022 (per 60 seconde)|1 seconde |**speechmatics**|**standard**|`v2`|0.017 (per 60 seconde)|1 seconde |**speechmatics**|-|`v2`|0.022 (per 60 seconde)|1 seconde |**gladia**|-|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokm√•l**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`mo`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`| |**at**|`at`| |**jp**|`jp`| |**mymr**|`mymr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokm√•l (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details><details><summary>Supported Models</summary><details><summary>deepgram</summary>      |Name|Value| |----|-----| |**deepgram**|`base`| ||`enhanced`|  </details><details><summary>speechmatics</summary>      |Name|Value| |----|-----| |**speechmatics**|`enhanced`| ||`standard`|  </details>  </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param settings: A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\\\"google\\\" : \\\"google_model\\\", \\\"ibm\\\": \\\"ibm_model\\\"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.
        :type settings: str
        :param provider_params:  Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       \\\"deepgram\\\": {         \\\"filler_words\\\": true,         \\\"smart_format\\\": true,         \\\"callback\\\": \\\"https://webhook.site/0000\\\"       },       \\\"assembly\\\": {         \\\"webhook_url\\\": \\\"https://webhook.site/0000\\\"       }     }  Please refer to the documentation of each provider to see which parameters to send.
        :type provider_params: str
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param language: Language code expected (ex: en, fr)
        :type language: str
        :param speakers: Number of speakers in the file audio
        :type speakers: int
        :param profanity_filter: Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
        :type profanity_filter: bool
        :param custom_vocabulary: List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
        :type custom_vocabulary: str
        :param convert_to_wav: Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
        :type convert_to_wav: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_create_serialize(
            providers=providers,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            settings=settings,
            provider_params=provider_params,
            file=file,
            file_url=file_url,
            language=language,
            speakers=speakers,
            profanity_filter=profanity_filter,
            custom_vocabulary=custom_vocabulary,
            convert_to_wav=convert_to_wav,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def audio_audio_speech_to_text_async_create_with_http_info(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        settings: Annotated[
            Optional[StrictStr],
            Field(
                description='A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\\"google\\" : \\"google_model\\", \\"ibm\\": \\"ibm_model\\"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      '
            ),
        ] = None,
        provider_params: Annotated[
            Optional[StrictStr],
            Field(
                description=' Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       \\"deepgram\\": {         \\"filler_words\\": true,         \\"smart_format\\": true,         \\"callback\\": \\"https://webhook.site/0000\\"       },       \\"assembly\\": {         \\"webhook_url\\": \\"https://webhook.site/0000\\"       }     }  Please refer to the documentation of each provider to see which parameters to send. '
            ),
        ] = None,
        file: Annotated[
            Optional[Union[StrictBytes, StrictStr]],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        language: Annotated[
            Optional[StrictStr],
            Field(description="Language code expected (ex: en, fr)"),
        ] = None,
        speakers: Annotated[
            Optional[StrictInt],
            Field(description="Number of speakers in the file audio"),
        ] = None,
        profanity_filter: Annotated[
            Optional[StrictBool],
            Field(
                description="Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks"
            ),
        ] = None,
        custom_vocabulary: Annotated[
            Optional[StrictStr],
            Field(
                description="List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)"
            ),
        ] = None,
        convert_to_wav: Annotated[
            Optional[StrictBool],
            Field(
                description="Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchAsyncJobResponse]:
        """Speech to Text Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Model|Version|Price|Billing unit| |----|----|-------|-----|------------| |**amazon**|-|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|-|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|-|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|-|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|-|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|-|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|-|`v1`|0.0162 (per 60 seconde)|1 seconde |**neuralspace**|-|`v1`|0.024 (per 60 seconde)|60 seconde |**assembly**|-|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram**|**enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|-|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|**base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|-|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics**|**enhanced**|`v2`|0.022 (per 60 seconde)|1 seconde |**speechmatics**|**standard**|`v2`|0.017 (per 60 seconde)|1 seconde |**speechmatics**|-|`v2`|0.022 (per 60 seconde)|1 seconde |**gladia**|-|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokm√•l**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`mo`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`| |**at**|`at`| |**jp**|`jp`| |**mymr**|`mymr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokm√•l (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details><details><summary>Supported Models</summary><details><summary>deepgram</summary>      |Name|Value| |----|-----| |**deepgram**|`base`| ||`enhanced`|  </details><details><summary>speechmatics</summary>      |Name|Value| |----|-----| |**speechmatics**|`enhanced`| ||`standard`|  </details>  </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param settings: A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\\\"google\\\" : \\\"google_model\\\", \\\"ibm\\\": \\\"ibm_model\\\"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.
        :type settings: str
        :param provider_params:  Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       \\\"deepgram\\\": {         \\\"filler_words\\\": true,         \\\"smart_format\\\": true,         \\\"callback\\\": \\\"https://webhook.site/0000\\\"       },       \\\"assembly\\\": {         \\\"webhook_url\\\": \\\"https://webhook.site/0000\\\"       }     }  Please refer to the documentation of each provider to see which parameters to send.
        :type provider_params: str
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param language: Language code expected (ex: en, fr)
        :type language: str
        :param speakers: Number of speakers in the file audio
        :type speakers: int
        :param profanity_filter: Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
        :type profanity_filter: bool
        :param custom_vocabulary: List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
        :type custom_vocabulary: str
        :param convert_to_wav: Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
        :type convert_to_wav: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_create_serialize(
            providers=providers,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            settings=settings,
            provider_params=provider_params,
            file=file,
            file_url=file_url,
            language=language,
            speakers=speakers,
            profanity_filter=profanity_filter,
            custom_vocabulary=custom_vocabulary,
            convert_to_wav=convert_to_wav,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def audio_audio_speech_to_text_async_create_without_preload_content(
        self,
        providers: Annotated[
            str,
            Field(
                min_length=1,
                strict=True,
                description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results.",
            ),
        ],
        fallback_providers: Annotated[
            Optional[StrictStr],
            Field(
                description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     "
            ),
        ] = None,
        show_original_response: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object."
            ),
        ] = None,
        webhook_receiver: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result."
            ),
        ] = None,
        users_webhook_parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(
                description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set."
            ),
        ] = None,
        settings: Annotated[
            Optional[StrictStr],
            Field(
                description='A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\\"google\\" : \\"google_model\\", \\"ibm\\": \\"ibm_model\\"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      '
            ),
        ] = None,
        provider_params: Annotated[
            Optional[StrictStr],
            Field(
                description=' Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       \\"deepgram\\": {         \\"filler_words\\": true,         \\"smart_format\\": true,         \\"callback\\": \\"https://webhook.site/0000\\"       },       \\"assembly\\": {         \\"webhook_url\\": \\"https://webhook.site/0000\\"       }     }  Please refer to the documentation of each provider to see which parameters to send. '
            ),
        ] = None,
        file: Annotated[
            Optional[Union[StrictBytes, StrictStr]],
            Field(
                description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**"
            ),
        ] = None,
        file_url: Annotated[
            Optional[StrictStr],
            Field(
                description="File **URL** to analyse to be used with with *content-type*: **application/json**."
            ),
        ] = None,
        language: Annotated[
            Optional[StrictStr],
            Field(description="Language code expected (ex: en, fr)"),
        ] = None,
        speakers: Annotated[
            Optional[StrictInt],
            Field(description="Number of speakers in the file audio"),
        ] = None,
        profanity_filter: Annotated[
            Optional[StrictBool],
            Field(
                description="Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks"
            ),
        ] = None,
        custom_vocabulary: Annotated[
            Optional[StrictStr],
            Field(
                description="List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)"
            ),
        ] = None,
        convert_to_wav: Annotated[
            Optional[StrictBool],
            Field(
                description="Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers"
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Speech to Text Launch Job

        <details><summary><strong style='color: #0072a3; cursor: pointer'>Available Providers</strong></summary>    |Provider|Model|Version|Price|Billing unit| |----|----|-------|-----|------------| |**amazon**|-|`boto3 (v1.15.18)`|0.024 (per 60 seconde)|15 seconde |**google**|-|`v1p1beta1`|0.024 (per 60 seconde)|1 seconde |**ibm**|-|`v1`|0.02 (per 60 seconde)|1 seconde |**microsoft**|-|`v1.0`|0.0168 (per 60 seconde)|1 seconde |**revai**|-|`v1`|0.02 (per 60 seconde)|15 seconde |**symbl**|-|`v1`|0.027 (per 60 seconde)|60 seconde |**voci**|-|`v1`|0.0162 (per 60 seconde)|1 seconde |**neuralspace**|-|`v1`|0.024 (per 60 seconde)|60 seconde |**assembly**|-|`v2`|0.011 (per 60 seconde)|1 seconde |**deepgram**|**enhanced**|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|-|`v1`|0.0189 (per 60 seconde)|1 seconde |**deepgram**|**base**|`v1`|0.0169 (per 60 seconde)|1 seconde |**openai**|-|`boto3 (v1.15.18)`|0.006 (per 60 seconde)|1 seconde |**speechmatics**|**enhanced**|`v2`|0.022 (per 60 seconde)|1 seconde |**speechmatics**|**standard**|`v2`|0.017 (per 60 seconde)|1 seconde |**speechmatics**|-|`v2`|0.022 (per 60 seconde)|1 seconde |**gladia**|-|`v1`|0.0102 (per 60 seconde)|1 seconde   </details>  <details><summary>Supported Languages</summary>      |Name|Value| |----|-----| |**Afrikaans**|`af`| |**Albanian**|`sq`| |**Amharic**|`am`| |**Arabic**|`ar`| |**Armenian**|`hy`| |**Azerbaijani**|`az`| |**Bashkir**|`ba`| |**Basque**|`eu`| |**Belarusian**|`be`| |**Bengali**|`bn`| |**Bosnian**|`bs`| |**Breton**|`br`| |**Bulgarian**|`bg`| |**Burmese**|`my`| |**Catalan**|`ca`| |**Central Khmer**|`km`| |**Chinese**|`zh`| |**Croatian**|`hr`| |**Czech**|`cs`| |**Danish**|`da`| |**Dutch**|`nl`| |**English**|`en`| |**Esperanto**|`eo`| |**Estonian**|`et`| |**Filipino**|`fil`| |**Finnish**|`fi`| |**French**|`fr`| |**Galician**|`gl`| |**Georgian**|`ka`| |**German**|`de`| |**Gujarati**|`gu`| |**Haitian**|`ht`| |**Hausa**|`ha`| |**Hebrew**|`he`| |**Hebrew**|`iw`| |**Hindi**|`hi`| |**Hungarian**|`hu`| |**Icelandic**|`is`| |**Indonesian**|`id`| |**Interlingua (International Auxiliary Language Association)**|`ia`| |**Irish**|`ga`| |**Italian**|`it`| |**Japanese**|`ja`| |**Javanese**|`jv`| |**Kannada**|`kn`| |**Kazakh**|`kk`| |**Korean**|`ko`| |**Lao**|`lo`| |**Latvian**|`lv`| |**Lingala**|`ln`| |**Lithuanian**|`lt`| |**Luxembourgish**|`lb`| |**Macedonian**|`mk`| |**Malagasy**|`mg`| |**Malay (macrolanguage)**|`ms`| |**Malayalam**|`ml`| |**Maltese**|`mt`| |**Mandarin Chinese**|`cmn`| |**Maori**|`mi`| |**Marathi**|`mr`| |**Modern Greek (1453-)**|`el`| |**Mongolian**|`mn`| |**Nepali (macrolanguage)**|`ne`| |**Norwegian**|`no`| |**Norwegian Bokm√•l**|`nb`| |**Occitan (post 1500)**|`oc`| |**Panjabi**|`pa`| |**Persian**|`fa`| |**Polish**|`pl`| |**Portuguese**|`pt`| |**Pushto**|`ps`| |**Romanian**|`mo`| |**Romanian**|`ro`| |**Russian**|`ru`| |**Serbian**|`sr`| |**Sindhi**|`sd`| |**Sinhala**|`si`| |**Slovak**|`sk`| |**Slovenian**|`sl`| |**Somali**|`so`| |**Spanish**|`es`| |**Sundanese**|`su`| |**Swahili (macrolanguage)**|`sw`| |**Swedish**|`sv`| |**Tagalog**|`tl`| |**Tamil**|`ta`| |**Telugu**|`te`| |**Thai**|`th`| |**Turkish**|`tr`| |**Uighur**|`ug`| |**Ukrainian**|`uk`| |**Urdu**|`ur`| |**Uzbek**|`uz`| |**Vietnamese**|`vi`| |**Welsh**|`cy`| |**Wu Chinese**|`wuu`| |**Yiddish**|`yi`| |**Yoruba**|`yo`| |**Yue Chinese**|`yue`| |**Zulu**|`zu`| |**at**|`at`| |**jp**|`jp`| |**mymr**|`mymr`|  </details><details><summary>Supported Detailed Languages</summary>      |Name|Value| |----|-----| |**Auto detection**|`auto-detect`| |**Afrikaans (South Africa)**|`af-ZA`| |**Albanian (Albania)**|`sq-AL`| |**Amharic (Ethiopia)**|`am-ET`| |**Arabic (Algeria)**|`ar-DZ`| |**Arabic (Bahrain)**|`ar-BH`| |**Arabic (Egypt)**|`ar-EG`| |**Arabic (Iraq)**|`ar-IQ`| |**Arabic (Israel)**|`ar-IL`| |**Arabic (Jordan)**|`ar-JO`| |**Arabic (Kuwait)**|`ar-KW`| |**Arabic (Lebanon)**|`ar-LB`| |**Arabic (Libya)**|`ar-LY`| |**Arabic (Mauritania)**|`ar-MR`| |**Arabic (Montserrat)**|`ar-MS`| |**Arabic (Morocco)**|`ar-MA`| |**Arabic (Oman)**|`ar-OM`| |**Arabic (Palestinian Territories)**|`ar-PS`| |**Arabic (Qatar)**|`ar-QA`| |**Arabic (Saudi Arabia)**|`ar-SA`| |**Arabic (Syria)**|`ar-SY`| |**Arabic (Tunisia)**|`ar-TN`| |**Arabic (United Arab Emirates)**|`ar-AE`| |**Arabic (Yemen)**|`ar-YE`| |**Armenian (Armenia)**|`hy-AM`| |**Azerbaijani (Azerbaijan)**|`az-AZ`| |**Bangla (Bangladesh)**|`bn-BD`| |**Bangla (India)**|`bn-IN`| |**Basque (Spain)**|`eu-ES`| |**Bosnian (Bosnia & Herzegovina)**|`bs-BA`| |**Bulgarian (Bulgaria)**|`bg-BG`| |**Burmese (Myanmar (Burma))**|`my-MM`| |**Cantonese (China)**|`yue-CN`| |**Cantonese (Traditional, Hong Kong SAR China)**|`yue-Hant-HK`| |**Catalan (Spain)**|`ca-ES`| |**Chinese (China)**|`zh-CN`| |**Chinese (Hong Kong SAR China)**|`zh-HK`| |**Chinese (Taiwan)**|`zh-TW`| |**Croatian (Croatia)**|`hr-HR`| |**Czech (Czechia)**|`cs-CZ`| |**Danish (Denmark)**|`da-DK`| |**Dutch (Belgium)**|`nl-BE`| |**Dutch (Netherlands)**|`nl-NL`| |**English (Australia)**|`en-AU`| |**English (Canada)**|`en-CA`| |**English (Ghana)**|`en-GH`| |**English (Hong Kong SAR China)**|`en-HK`| |**English (India)**|`en-IN`| |**English (Ireland)**|`en-IE`| |**English (Kenya)**|`en-KE`| |**English (New Zealand)**|`en-NZ`| |**English (Nigeria)**|`en-NG`| |**English (Pakistan)**|`en-PK`| |**English (Philippines)**|`en-PH`| |**English (Singapore)**|`en-SG`| |**English (South Africa)**|`en-ZA`| |**English (Tanzania)**|`en-TZ`| |**English (United Kingdom)**|`en-GB`| |**English (United Kingdom)**|`en-UK`| |**English (United States)**|`en-US`| |**Estonian (Estonia)**|`et-EE`| |**Filipino (Philippines)**|`fil-PH`| |**Finnish (Finland)**|`fi-FI`| |**French (Belgium)**|`fr-BE`| |**French (Canada)**|`fr-CA`| |**French (France)**|`fr-FR`| |**French (Switzerland)**|`fr-CH`| |**Galician (Spain)**|`gl-ES`| |**Georgian (Georgia)**|`ka-GE`| |**German (Austria)**|`de-AT`| |**German (Germany)**|`de-DE`| |**German (Switzerland)**|`de-CH`| |**Greek (Greece)**|`el-GR`| |**Gujarati (India)**|`gu-IN`| |**Hebrew (Israel)**|`he-IL`| |**Hebrew (Israel)**|`iw-IL`| |**Hindi (India)**|`hi-IN`| |**Hindi (Latin)**|`hi-Latn`| |**Hungarian (Hungary)**|`hu-HU`| |**Icelandic (Iceland)**|`is-IS`| |**Indonesian (Indonesia)**|`id-ID`| |**Irish (Ireland)**|`ga-IE`| |**Italian (Italy)**|`it-IT`| |**Italian (Switzerland)**|`it-CH`| |**Japanese (Japan)**|`ja-JP`| |**Javanese (Indonesia)**|`jv-ID`| |**Kannada (India)**|`kn-IN`| |**Kazakh (Kazakhstan)**|`kk-KZ`| |**Khmer (Cambodia)**|`km-KH`| |**Korean (South Korea)**|`ko-KR`| |**Lao (Laos)**|`lo-LA`| |**Latvian (Latvia)**|`lv-LV`| |**Lithuanian (Lithuania)**|`lt-LT`| |**Macedonian (North Macedonia)**|`mk-MK`| |**Malay (Malaysia)**|`ms-MY`| |**Malayalam (India)**|`ml-IN`| |**Maltese (Malta)**|`mt-MT`| |**Marathi (India)**|`mr-IN`| |**Mongolian (Mongolia)**|`mn-MN`| |**Nepali (Nepal)**|`ne-NP`| |**Norwegian (Norway)**|`no-NO`| |**Norwegian Bokm√•l (Norway)**|`nb-NO`| |**Pashto (Afghanistan)**|`ps-AF`| |**Persian (Iran)**|`fa-IR`| |**Polish (Poland)**|`pl-PL`| |**Portuguese (Brazil)**|`pt-BR`| |**Portuguese (Portugal)**|`pt-PT`| |**Punjabi (India)**|`pa-Guru-IN`| |**Romanian (Romania)**|`ro-RO`| |**Russian (Russia)**|`ru-RU`| |**Serbian (Serbia)**|`sr-RS`| |**Sinhala (Sri Lanka)**|`si-LK`| |**Slovak (Slovakia)**|`sk-SK`| |**Slovenian (Slovenia)**|`sl-SI`| |**Somali (Somalia)**|`so-SO`| |**Spanish (Argentina)**|`es-AR`| |**Spanish (Bolivia)**|`es-BO`| |**Spanish (Chile)**|`es-CL`| |**Spanish (Colombia)**|`es-CO`| |**Spanish (Costa Rica)**|`es-CR`| |**Spanish (Cuba)**|`es-CU`| |**Spanish (Dominican Republic)**|`es-DO`| |**Spanish (Ecuador)**|`es-EC`| |**Spanish (El Salvador)**|`es-SV`| |**Spanish (Equatorial Guinea)**|`es-GQ`| |**Spanish (Guatemala)**|`es-GT`| |**Spanish (Honduras)**|`es-HN`| |**Spanish (Laos)**|`es-LA`| |**Spanish (Latin America)**|`es-419`| |**Spanish (Mexico)**|`es-MX`| |**Spanish (Nicaragua)**|`es-NI`| |**Spanish (Panama)**|`es-PA`| |**Spanish (Paraguay)**|`es-PY`| |**Spanish (Peru)**|`es-PE`| |**Spanish (Puerto Rico)**|`es-PR`| |**Spanish (Spain)**|`es-ES`| |**Spanish (United States)**|`es-US`| |**Spanish (Uruguay)**|`es-UY`| |**Spanish (Venezuela)**|`es-VE`| |**Sundanese (Indonesia)**|`su-ID`| |**Swahili (Kenya)**|`sw-KE`| |**Swahili (Tanzania)**|`sw-TZ`| |**Swedish (Sweden)**|`sv-SE`| |**Tamil (India)**|`ta-IN`| |**Tamil (Malaysia)**|`ta-MY`| |**Tamil (Singapore)**|`ta-SG`| |**Tamil (Sri Lanka)**|`ta-LK`| |**Telugu (India)**|`te-IN`| |**Thai (Thailand)**|`th-TH`| |**Turkish (Turkey)**|`tr-TR`| |**Ukrainian (Ukraine)**|`uk-UA`| |**Urdu (India)**|`ur-IN`| |**Urdu (Pakistan)**|`ur-PK`| |**Uzbek (Uzbekistan)**|`uz-UZ`| |**Vietnamese (Vietnam)**|`vi-VN`| |**Welsh (United Kingdom)**|`cy-GB`| |**Wu Chinese (China)**|`wuu-CN`| |**Zulu (South Africa)**|`zu-ZA`|  </details><details><summary>Supported Models</summary><details><summary>deepgram</summary>      |Name|Value| |----|-----| |**deepgram**|`base`| ||`enhanced`|  </details><details><summary>speechmatics</summary>      |Name|Value| |----|-----| |**speechmatics**|`enhanced`| ||`standard`|  </details>  </details>

        :param providers: It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results. (required)
        :type providers: str
        :param fallback_providers: Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*
        :type fallback_providers: str
        :param show_original_response: Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.
        :type show_original_response: bool
        :param webhook_receiver: Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.
        :type webhook_receiver: str
        :param users_webhook_parameters: Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.
        :type users_webhook_parameters: Dict[str, object]
        :param settings: A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {\\\"google\\\" : \\\"google_model\\\", \\\"ibm\\\": \\\"ibm_model\\\"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.
        :type settings: str
        :param provider_params:  Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       \\\"deepgram\\\": {         \\\"filler_words\\\": true,         \\\"smart_format\\\": true,         \\\"callback\\\": \\\"https://webhook.site/0000\\\"       },       \\\"assembly\\\": {         \\\"webhook_url\\\": \\\"https://webhook.site/0000\\\"       }     }  Please refer to the documentation of each provider to see which parameters to send.
        :type provider_params: str
        :param file: File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**
        :type file: bytearray
        :param file_url: File **URL** to analyse to be used with with *content-type*: **application/json**.
        :type file_url: str
        :param language: Language code expected (ex: en, fr)
        :type language: str
        :param speakers: Number of speakers in the file audio
        :type speakers: int
        :param profanity_filter: Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks
        :type profanity_filter: bool
        :param custom_vocabulary: List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)
        :type custom_vocabulary: str
        :param convert_to_wav: Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers
        :type convert_to_wav: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_create_serialize(
            providers=providers,
            fallback_providers=fallback_providers,
            show_original_response=show_original_response,
            webhook_receiver=webhook_receiver,
            users_webhook_parameters=users_webhook_parameters,
            settings=settings,
            provider_params=provider_params,
            file=file,
            file_url=file_url,
            language=language,
            speakers=speakers,
            profanity_filter=profanity_filter,
            custom_vocabulary=custom_vocabulary,
            convert_to_wav=convert_to_wav,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "LaunchAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _audio_audio_speech_to_text_async_create_serialize(
        self,
        providers,
        fallback_providers,
        show_original_response,
        webhook_receiver,
        users_webhook_parameters,
        settings,
        provider_params,
        file,
        file_url,
        language,
        speakers,
        profanity_filter,
        custom_vocabulary,
        convert_to_wav,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if providers is not None:
            _form_params.append(("providers", providers))
        if fallback_providers is not None:
            _form_params.append(("fallback_providers", fallback_providers))
        if show_original_response is not None:
            _form_params.append(("show_original_response", show_original_response))
        if webhook_receiver is not None:
            _form_params.append(("webhook_receiver", webhook_receiver))
        if users_webhook_parameters is not None:
            _form_params.append(("users_webhook_parameters", users_webhook_parameters))
        if settings is not None:
            _form_params.append(("settings", settings))
        if provider_params is not None:
            _form_params.append(("provider_params", provider_params))
        if file is not None:
            _files["file"] = file
        if file_url is not None:
            _form_params.append(("file_url", file_url))
        if language is not None:
            _form_params.append(("language", language))
        if speakers is not None:
            _form_params.append(("speakers", speakers))
        if profanity_filter is not None:
            _form_params.append(("profanity_filter", profanity_filter))
        if custom_vocabulary is not None:
            _form_params.append(("custom_vocabulary", custom_vocabulary))
        if convert_to_wav is not None:
            _form_params.append(("convert_to_wav", convert_to_wav))
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["multipart/form-data", "application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/audio/speech_to_text_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def audio_audio_speech_to_text_async_destroy(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Speech to text delete Jobs

        Generic class to handle method GET all async job for user  Attributes:     feature (str): EdenAI feature     subfeature (str): EdenAI subfeature

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_destroy_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def audio_audio_speech_to_text_async_destroy_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Speech to text delete Jobs

        Generic class to handle method GET all async job for user  Attributes:     feature (str): EdenAI feature     subfeature (str): EdenAI subfeature

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_destroy_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def audio_audio_speech_to_text_async_destroy_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Speech to text delete Jobs

        Generic class to handle method GET all async job for user  Attributes:     feature (str): EdenAI feature     subfeature (str): EdenAI subfeature

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_destroy_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _audio_audio_speech_to_text_async_destroy_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/audio/speech_to_text_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def audio_audio_speech_to_text_async_retrieve(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListAsyncJobResponse:
        """Speech to Text List Jobs

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def audio_audio_speech_to_text_async_retrieve_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListAsyncJobResponse]:
        """Speech to Text List Jobs

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def audio_audio_speech_to_text_async_retrieve_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Speech to Text List Jobs

        Get a list of all jobs launched for this feature. You'll then be able to use the ID of each one to get its status and results.<br>                         Please note that a **job status doesn't get updated until a get request** is sent.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_retrieve_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListAsyncJobResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _audio_audio_speech_to_text_async_retrieve_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/audio/speech_to_text_async",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def audio_audio_speech_to_text_async_retrieve2(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AsyncaudiospeechToTextAsyncResponseModel:
        """Speech to Text Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AsyncaudiospeechToTextAsyncResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def audio_audio_speech_to_text_async_retrieve2_with_http_info(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AsyncaudiospeechToTextAsyncResponseModel]:
        """Speech to Text Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AsyncaudiospeechToTextAsyncResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def audio_audio_speech_to_text_async_retrieve2_without_preload_content(
        self,
        public_id: StrictStr,
        response_as_dict: Optional[StrictBool] = None,
        show_original_response: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Speech to Text Get Job Results

        Get the status and results of an async job given its ID.

        :param public_id: (required)
        :type public_id: str
        :param response_as_dict:
        :type response_as_dict: bool
        :param show_original_response:
        :type show_original_response: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._audio_audio_speech_to_text_async_retrieve2_serialize(
            public_id=public_id,
            response_as_dict=response_as_dict,
            show_original_response=show_original_response,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "AsyncaudiospeechToTextAsyncResponseModel",
            "400": "BadRequest",
            "500": "Error",
            "403": "Error",
            "404": "NotFoundResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _audio_audio_speech_to_text_async_retrieve2_serialize(
        self,
        public_id,
        response_as_dict,
        show_original_response,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if public_id is not None:
            _path_params["public_id"] = public_id
        # process the query parameters
        if response_as_dict is not None:
            _query_params.append(("response_as_dict", response_as_dict))

        if show_original_response is not None:
            _query_params.append(("show_original_response", show_original_response))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings: List[str] = ["FeatureApiAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/audio/speech_to_text_async/{public_id}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
