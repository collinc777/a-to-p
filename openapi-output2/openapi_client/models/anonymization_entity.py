# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.category_type import CategoryType
from openapi_client.models.subcategory import Subcategory
from typing import Optional, Set
from typing_extensions import Self


class AnonymizationEntity(BaseModel):
    """
    This model represents an entity extracted from the text.      Attributes:         offset (int): The offset of the entity in the text.         length (int): The lenght of the entity in the text.         category (CategoryType): The category of the entity.         subcategory (SubCategoryType): The subcategory of the entity.         original_label (str): The original label of the entity.         content (str): The content of the entity.
    """  # noqa: E501

    offset: Annotated[int, Field(strict=True, ge=0)]
    length: Annotated[int, Field(strict=True)]
    category: CategoryType
    subcategory: Subcategory
    original_label: Annotated[str, Field(min_length=1, strict=True)]
    content: Annotated[str, Field(min_length=1, strict=True)]
    confidence_score: Annotated[int, Field(le=1, strict=True, ge=0)]
    __properties: ClassVar[List[str]] = [
        "offset",
        "length",
        "category",
        "subcategory",
        "original_label",
        "content",
        "confidence_score",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnonymizationEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subcategory
        if self.subcategory:
            _dict["subcategory"] = self.subcategory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnonymizationEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "offset": obj.get("offset"),
                "length": obj.get("length"),
                "category": obj.get("category"),
                "subcategory": Subcategory.from_dict(obj["subcategory"])
                if obj.get("subcategory") is not None
                else None,
                "original_label": obj.get("original_label"),
                "content": obj.get("content"),
                "confidence_score": obj.get("confidence_score"),
            }
        )
        return _obj
