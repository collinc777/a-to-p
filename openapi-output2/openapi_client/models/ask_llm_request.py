# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class AskLLMRequest(BaseModel):
    """
    AskLLMRequest
    """  # noqa: E501

    query: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="Enter your question or query about the data. The large language model (LLM) will provide a response."
    )
    llm_provider: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default="openai",
        description="Select a provider for the large language model for processing. Leave empty for default.",
    )
    llm_model: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Specify the model to use for language processing. Leave empty for default.",
    )
    k: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(
        default=3, description="How many results chunk you want to return"
    )
    history: Optional[List[Dict[str, Any]]] = Field(
        default=None,
        description="A list containing all the previous conversations between the user and the chatbot AI. Each item in the list should be a dictionary with two keys: 'user' and 'assistant'.",
    )
    chatbot_global_action: Optional[
        Annotated[str, Field(min_length=1, strict=True)]
    ] = Field(
        default=None,
        description="A system message that helps set the behavior of the assistant.",
    )
    filter_documents: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Filter uploaded documents based on their metadata. Specify key-value pairs where the key represents the metadata field and the value is the desired metadata value. Please ensure that the provided metadata keys are available in your database.",
    )
    temperature: Optional[
        Union[
            Annotated[float, Field(le=2, strict=True, ge=0)],
            Annotated[int, Field(le=2, strict=True, ge=0)],
        ]
    ] = Field(
        default=0.0,
        description="Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.",
    )
    max_tokens: Optional[Annotated[int, Field(le=16385, strict=True, ge=1)]] = Field(
        default=100,
        description="The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
    )
    __properties: ClassVar[List[str]] = [
        "query",
        "llm_provider",
        "llm_model",
        "k",
        "history",
        "chatbot_global_action",
        "filter_documents",
        "temperature",
        "max_tokens",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AskLLMRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AskLLMRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "query": obj.get("query"),
                "llm_provider": obj.get("llm_provider")
                if obj.get("llm_provider") is not None
                else "openai",
                "llm_model": obj.get("llm_model"),
                "k": obj.get("k") if obj.get("k") is not None else 3,
                "history": obj.get("history"),
                "chatbot_global_action": obj.get("chatbot_global_action"),
                "filter_documents": obj.get("filter_documents"),
                "temperature": obj.get("temperature")
                if obj.get("temperature") is not None
                else 0.0,
                "max_tokens": obj.get("max_tokens")
                if obj.get("max_tokens") is not None
                else 100,
            }
        )
        return _obj
