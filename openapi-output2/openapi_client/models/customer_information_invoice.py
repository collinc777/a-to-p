# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class CustomerInformationInvoice(BaseModel):
    """
    CustomerInformationInvoice
    """  # noqa: E501

    customer_name: StrictStr
    customer_address: StrictStr
    customer_email: StrictStr
    customer_id: StrictStr
    customer_tax_id: StrictStr
    customer_mailing_address: StrictStr
    customer_billing_address: StrictStr
    customer_shipping_address: StrictStr
    customer_service_address: StrictStr
    customer_remittance_address: StrictStr
    abn_number: StrictStr
    gst_number: StrictStr
    pan_number: StrictStr
    vat_number: StrictStr
    siret_number: Optional[StrictStr] = None
    siren_number: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "customer_name",
        "customer_address",
        "customer_email",
        "customer_id",
        "customer_tax_id",
        "customer_mailing_address",
        "customer_billing_address",
        "customer_shipping_address",
        "customer_service_address",
        "customer_remittance_address",
        "abn_number",
        "gst_number",
        "pan_number",
        "vat_number",
        "siret_number",
        "siren_number",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerInformationInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerInformationInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "customer_name": obj.get("customer_name"),
                "customer_address": obj.get("customer_address"),
                "customer_email": obj.get("customer_email"),
                "customer_id": obj.get("customer_id"),
                "customer_tax_id": obj.get("customer_tax_id"),
                "customer_mailing_address": obj.get("customer_mailing_address"),
                "customer_billing_address": obj.get("customer_billing_address"),
                "customer_shipping_address": obj.get("customer_shipping_address"),
                "customer_service_address": obj.get("customer_service_address"),
                "customer_remittance_address": obj.get("customer_remittance_address"),
                "abn_number": obj.get("abn_number"),
                "gst_number": obj.get("gst_number"),
                "pan_number": obj.get("pan_number"),
                "vat_number": obj.get("vat_number"),
                "siret_number": obj.get("siret_number"),
                "siren_number": obj.get("siren_number"),
            }
        )
        return _obj
