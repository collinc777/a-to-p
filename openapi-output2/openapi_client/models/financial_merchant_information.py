# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class FinancialMerchantInformation(BaseModel):
    """
    FinancialMerchantInformation
    """  # noqa: E501

    name: Optional[StrictStr] = Field(default=None, description="Name of the merchant.")
    address: Optional[StrictStr] = Field(
        default=None, description="Address of the merchant."
    )
    phone: Optional[StrictStr] = Field(
        default=None, description="Phone number of the merchant."
    )
    tax_id: Optional[StrictStr] = Field(
        default=None, description="Tax identification number of the merchant."
    )
    id_reference: Optional[StrictStr] = Field(
        default=None, description="Unique reference ID for the merchant."
    )
    vat_number: Optional[StrictStr] = Field(
        default=None, description="VAT (Value Added Tax) number of the merchant."
    )
    abn_number: Optional[StrictStr] = Field(
        default=None, description="ABN (Australian Business Number) of the merchant."
    )
    gst_number: Optional[StrictStr] = Field(
        default=None, description="GST (Goods and Services Tax) number of the merchant."
    )
    business_number: Optional[StrictStr] = Field(
        default=None, description="Business registration number of the merchant."
    )
    siret_number: Optional[StrictStr] = Field(
        default=None,
        description="SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Établissements) number of the merchant.",
    )
    siren_number: Optional[StrictStr] = Field(
        default=None,
        description="SIREN (Système d'Identification du Répertoire des Entreprises) number of the merchant.",
    )
    pan_number: Optional[StrictStr] = Field(
        default=None, description="PAN (Permanent Account Number) of the merchant."
    )
    coc_number: Optional[StrictStr] = Field(
        default=None,
        description="Chamber of Commerce registration number of the merchant.",
    )
    fiscal_number: Optional[StrictStr] = Field(
        default=None, description="Fiscal identification number of the merchant."
    )
    email: Optional[StrictStr] = Field(
        default=None, description="Email address of the merchant."
    )
    fax: Optional[StrictStr] = Field(
        default=None, description="Fax number of the merchant."
    )
    website: Optional[StrictStr] = Field(
        default=None, description="Website of the merchant."
    )
    registration: Optional[StrictStr] = Field(
        default=None, description="Official registration information of the merchant."
    )
    city: Optional[StrictStr] = Field(
        default=None, description="City associated with the merchant's address."
    )
    country: Optional[StrictStr] = Field(
        default=None, description="Country associated with the merchant's address."
    )
    house_number: Optional[StrictStr] = Field(
        default=None, description="House number associated with the merchant's address."
    )
    province: Optional[StrictStr] = Field(
        default=None, description="Province associated with the merchant's address."
    )
    street_name: Optional[StrictStr] = Field(
        default=None, description="Street name associated with the merchant's address."
    )
    zip_code: Optional[StrictStr] = Field(
        default=None, description="ZIP code associated with the merchant's address."
    )
    country_code: Optional[StrictStr] = Field(
        default=None,
        description="Country code associated with the merchant's location.",
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "address",
        "phone",
        "tax_id",
        "id_reference",
        "vat_number",
        "abn_number",
        "gst_number",
        "business_number",
        "siret_number",
        "siren_number",
        "pan_number",
        "coc_number",
        "fiscal_number",
        "email",
        "fax",
        "website",
        "registration",
        "city",
        "country",
        "house_number",
        "province",
        "street_name",
        "zip_code",
        "country_code",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinancialMerchantInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinancialMerchantInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "address": obj.get("address"),
                "phone": obj.get("phone"),
                "tax_id": obj.get("tax_id"),
                "id_reference": obj.get("id_reference"),
                "vat_number": obj.get("vat_number"),
                "abn_number": obj.get("abn_number"),
                "gst_number": obj.get("gst_number"),
                "business_number": obj.get("business_number"),
                "siret_number": obj.get("siret_number"),
                "siren_number": obj.get("siren_number"),
                "pan_number": obj.get("pan_number"),
                "coc_number": obj.get("coc_number"),
                "fiscal_number": obj.get("fiscal_number"),
                "email": obj.get("email"),
                "fax": obj.get("fax"),
                "website": obj.get("website"),
                "registration": obj.get("registration"),
                "city": obj.get("city"),
                "country": obj.get("country"),
                "house_number": obj.get("house_number"),
                "province": obj.get("province"),
                "street_name": obj.get("street_name"),
                "zip_code": obj.get("zip_code"),
                "country_code": obj.get("country_code"),
            }
        )
        return _obj
