# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bar_code import BarCode
from openapi_client.models.customer_information import CustomerInformation
from openapi_client.models.item_lines import ItemLines
from openapi_client.models.locale import Locale
from openapi_client.models.merchant_information import MerchantInformation
from openapi_client.models.payment_information import PaymentInformation
from openapi_client.models.taxes import Taxes
from typing import Set
from typing_extensions import Self


class InfosReceiptParserDataClass(BaseModel):
    """
    InfosReceiptParserDataClass
    """  # noqa: E501

    invoice_number: Optional[StrictStr] = None
    invoice_total: Optional[StrictInt] = None
    invoice_subtotal: Optional[StrictInt] = None
    barcodes: Optional[List[BarCode]] = None
    category: Optional[StrictStr] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    due_date: Optional[StrictStr] = None
    time: Optional[StrictStr] = None
    customer_information: Optional[CustomerInformation] = None
    merchant_information: Optional[MerchantInformation] = None
    payment_information: Optional[PaymentInformation] = None
    locale: Optional[Locale] = None
    taxes: Optional[List[Taxes]] = None
    receipt_infos: Optional[Dict[str, Any]] = None
    item_lines: Optional[List[ItemLines]] = None
    __properties: ClassVar[List[str]] = [
        "invoice_number",
        "invoice_total",
        "invoice_subtotal",
        "barcodes",
        "category",
        "date",
        "due_date",
        "time",
        "customer_information",
        "merchant_information",
        "payment_information",
        "locale",
        "taxes",
        "receipt_infos",
        "item_lines",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfosReceiptParserDataClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in barcodes (list)
        _items = []
        if self.barcodes:
            for _item in self.barcodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["barcodes"] = _items
        # override the default output from pydantic by calling `to_dict()` of customer_information
        if self.customer_information:
            _dict["customer_information"] = self.customer_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_information
        if self.merchant_information:
            _dict["merchant_information"] = self.merchant_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_information
        if self.payment_information:
            _dict["payment_information"] = self.payment_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locale
        if self.locale:
            _dict["locale"] = self.locale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item in self.taxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["taxes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_lines (list)
        _items = []
        if self.item_lines:
            for _item in self.item_lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict["item_lines"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfosReceiptParserDataClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "invoice_number": obj.get("invoice_number"),
                "invoice_total": obj.get("invoice_total"),
                "invoice_subtotal": obj.get("invoice_subtotal"),
                "barcodes": [BarCode.from_dict(_item) for _item in obj["barcodes"]]
                if obj.get("barcodes") is not None
                else None,
                "category": obj.get("category"),
                "date": obj.get("date"),
                "due_date": obj.get("due_date"),
                "time": obj.get("time"),
                "customer_information": CustomerInformation.from_dict(
                    obj["customer_information"]
                )
                if obj.get("customer_information") is not None
                else None,
                "merchant_information": MerchantInformation.from_dict(
                    obj["merchant_information"]
                )
                if obj.get("merchant_information") is not None
                else None,
                "payment_information": PaymentInformation.from_dict(
                    obj["payment_information"]
                )
                if obj.get("payment_information") is not None
                else None,
                "locale": Locale.from_dict(obj["locale"])
                if obj.get("locale") is not None
                else None,
                "taxes": [Taxes.from_dict(_item) for _item in obj["taxes"]]
                if obj.get("taxes") is not None
                else None,
                "receipt_infos": obj.get("receipt_infos"),
                "item_lines": [
                    ItemLines.from_dict(_item) for _item in obj["item_lines"]
                ]
                if obj.get("item_lines") is not None
                else None,
            }
        )
        return _obj
