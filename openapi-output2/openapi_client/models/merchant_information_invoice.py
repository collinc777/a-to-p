# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self


class MerchantInformationInvoice(BaseModel):
    """
    MerchantInformationInvoice
    """  # noqa: E501

    merchant_name: StrictStr
    merchant_address: StrictStr
    merchant_phone: StrictStr
    merchant_email: StrictStr
    merchant_fax: StrictStr
    merchant_website: StrictStr
    merchant_tax_id: StrictStr
    merchant_siret: StrictStr
    merchant_siren: StrictStr
    abn_number: StrictStr
    gst_number: StrictStr
    pan_number: StrictStr
    vat_number: StrictStr
    __properties: ClassVar[List[str]] = [
        "merchant_name",
        "merchant_address",
        "merchant_phone",
        "merchant_email",
        "merchant_fax",
        "merchant_website",
        "merchant_tax_id",
        "merchant_siret",
        "merchant_siren",
        "abn_number",
        "gst_number",
        "pan_number",
        "vat_number",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantInformationInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantInformationInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "merchant_name": obj.get("merchant_name"),
                "merchant_address": obj.get("merchant_address"),
                "merchant_phone": obj.get("merchant_phone"),
                "merchant_email": obj.get("merchant_email"),
                "merchant_fax": obj.get("merchant_fax"),
                "merchant_website": obj.get("merchant_website"),
                "merchant_tax_id": obj.get("merchant_tax_id"),
                "merchant_siret": obj.get("merchant_siret"),
                "merchant_siren": obj.get("merchant_siren"),
                "abn_number": obj.get("abn_number"),
                "gst_number": obj.get("gst_number"),
                "pan_number": obj.get("pan_number"),
                "vat_number": obj.get("vat_number"),
            }
        )
        return _obj
