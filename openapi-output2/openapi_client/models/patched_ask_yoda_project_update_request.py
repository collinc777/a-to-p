# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class PatchedAskYodaProjectUpdateRequest(BaseModel):
    """
    PatchedAskYodaProjectUpdateRequest
    """  # noqa: E501

    ocr_provider: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    speech_to_text_provider: Optional[
        Annotated[str, Field(min_length=1, strict=True)]
    ] = None
    llm_provider: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Select a default LLM provider to use in your project.",
    )
    llm_model: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Select a default Model for LLM provider to use in your project",
    )
    chunk_size: Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]] = None
    chunk_separators: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "ocr_provider",
        "speech_to_text_provider",
        "llm_provider",
        "llm_model",
        "chunk_size",
        "chunk_separators",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedAskYodaProjectUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if chunk_size (nullable) is None
        # and model_fields_set contains the field
        if self.chunk_size is None and "chunk_size" in self.model_fields_set:
            _dict["chunk_size"] = None

        # set to None if chunk_separators (nullable) is None
        # and model_fields_set contains the field
        if (
            self.chunk_separators is None
            and "chunk_separators" in self.model_fields_set
        ):
            _dict["chunk_separators"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedAskYodaProjectUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ocr_provider": obj.get("ocr_provider"),
                "speech_to_text_provider": obj.get("speech_to_text_provider"),
                "llm_provider": obj.get("llm_provider"),
                "llm_model": obj.get("llm_model"),
                "chunk_size": obj.get("chunk_size"),
                "chunk_separators": obj.get("chunk_separators"),
            }
        )
        return _obj
