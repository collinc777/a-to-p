# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictBytes,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class SpeechToTextAsyncRequest(BaseModel):
    """
    SpeechToTextAsyncRequest
    """  # noqa: E501

    providers: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="It can be one (ex: **'amazon'** or **'google'**) or multiple provider(s) (ex: **'amazon,microsoft,google'**)             that the data will be redirected to in order to get the processed results."
    )
    fallback_providers: Optional[StrictStr] = Field(
        default=None,
        description="Providers in this list will be used as fallback if the call to provider in `providers` parameter fails.     To use this feature, you must input **only one** provider in the `providers` parameter. but you can put up to 5 fallbacks.  They will be tried in the same order they are input, and it will stop to the first provider who doesn't fail.   *Doesn't work with async subfeatures.*     ",
    )
    show_original_response: Optional[StrictBool] = Field(
        default=False,
        description="Optional : Shows the original response of the provider.<br>         When set to **true**, a new attribute *original_response* will appear in the response object.",
    )
    webhook_receiver: Optional[Annotated[str, Field(min_length=1, strict=True)]] = (
        Field(
            default=None,
            description="Webhook receiver should be a valid https URL (ex : https://your.listner.com/endpoint).             After the processing is done, the webhook endpoint will receive a POST request with the result.",
        )
    )
    users_webhook_parameters: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Json data that contains of additional parameters that will be sent back to the webhook receiver             (ex: api key for security or client's data ID to link the result internally).             Will only be used when webhook_receiver is set.",
    )
    settings: Optional[StrictStr] = Field(
        default=None,
        description='A dictionnary or a json object to specify specific models to use for some providers. <br>                     It can be in the following format: {"google" : "google_model", "ibm": "ibm_model"...}.                      **Caution**: setting models can be done only with `Content-Type` : `application/json`.                      ',
    )
    provider_params: Optional[StrictStr] = Field(
        default=None,
        description=' Parameters specific to the provider that you want to send along the request.  it should take a *provider* name as key and an object of parameters as value.  Example:      {       "deepgram": {         "filler_words": true,         "smart_format": true,         "callback": "https://webhook.site/0000"       },       "assembly": {         "webhook_url": "https://webhook.site/0000"       }     }  Please refer to the documentation of each provider to see which parameters to send. ',
    )
    file: Optional[Union[StrictBytes, StrictStr]] = Field(
        default=None,
        description="File to analyse in binary format to be used with *content-type*: **multipart/form-data** <br> **Does not work with application/json !**",
    )
    file_url: Optional[StrictStr] = Field(
        default=None,
        description="File **URL** to analyse to be used with with *content-type*: **application/json**.",
    )
    language: Optional[StrictStr] = Field(
        default=None, description="Language code expected (ex: en, fr)"
    )
    speakers: Optional[StrictInt] = Field(
        default=2, description="Number of speakers in the file audio"
    )
    profanity_filter: Optional[StrictBool] = Field(
        default=False,
        description="Boolean value to specify weather or not the service will filter profanity and replace inappropriate words with a series of asterisks",
    )
    custom_vocabulary: Optional[StrictStr] = Field(
        default="",
        description="List of words or composed words to be detected by the speech to text engine. (Ex: Word, Mike, Draw, Los Angeles,...)",
    )
    convert_to_wav: Optional[StrictBool] = Field(
        default=False,
        description="Boolean value to specify weather to convert the audio/video file to wav format to be accepted by a majority of the providers",
    )
    __properties: ClassVar[List[str]] = [
        "providers",
        "fallback_providers",
        "show_original_response",
        "webhook_receiver",
        "users_webhook_parameters",
        "settings",
        "provider_params",
        "file",
        "file_url",
        "language",
        "speakers",
        "profanity_filter",
        "custom_vocabulary",
        "convert_to_wav",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpeechToTextAsyncRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fallback_providers (nullable) is None
        # and model_fields_set contains the field
        if (
            self.fallback_providers is None
            and "fallback_providers" in self.model_fields_set
        ):
            _dict["fallback_providers"] = None

        # set to None if file_url (nullable) is None
        # and model_fields_set contains the field
        if self.file_url is None and "file_url" in self.model_fields_set:
            _dict["file_url"] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict["language"] = None

        # set to None if speakers (nullable) is None
        # and model_fields_set contains the field
        if self.speakers is None and "speakers" in self.model_fields_set:
            _dict["speakers"] = None

        # set to None if profanity_filter (nullable) is None
        # and model_fields_set contains the field
        if (
            self.profanity_filter is None
            and "profanity_filter" in self.model_fields_set
        ):
            _dict["profanity_filter"] = None

        # set to None if convert_to_wav (nullable) is None
        # and model_fields_set contains the field
        if self.convert_to_wav is None and "convert_to_wav" in self.model_fields_set:
            _dict["convert_to_wav"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpeechToTextAsyncRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "providers": obj.get("providers"),
                "fallback_providers": obj.get("fallback_providers"),
                "show_original_response": obj.get("show_original_response")
                if obj.get("show_original_response") is not None
                else False,
                "webhook_receiver": obj.get("webhook_receiver"),
                "users_webhook_parameters": obj.get("users_webhook_parameters"),
                "settings": obj.get("settings"),
                "provider_params": obj.get("provider_params"),
                "file": obj.get("file"),
                "file_url": obj.get("file_url"),
                "language": obj.get("language"),
                "speakers": obj.get("speakers")
                if obj.get("speakers") is not None
                else 2,
                "profanity_filter": obj.get("profanity_filter")
                if obj.get("profanity_filter") is not None
                else False,
                "custom_vocabulary": obj.get("custom_vocabulary")
                if obj.get("custom_vocabulary") is not None
                else "",
                "convert_to_wav": obj.get("convert_to_wav")
                if obj.get("convert_to_wav") is not None
                else False,
            }
        )
        return _obj
