# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559368281840 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559368281840,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370118992 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370118992,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370124064 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370124064,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370125008 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370125008,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370125952 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370125952,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370128768 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370128768,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370129712 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370129712,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370130656 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370130656,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370134016 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370134016,
)
from openapi_client.models.pydantic_main_translationautomatic_translation_automatic_translation_data_class94559370134960 import (
    PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370134960,
)
from typing import Set
from typing_extensions import Self


class TranslationautomaticTranslationResponseModel(BaseModel):
    """
    TranslationautomaticTranslationResponseModel
    """  # noqa: E501

    microsoft: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559368281840
    ] = None
    google: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370118992
    ] = None
    ibm: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370124064
    ] = None
    deepl: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370125008
    ] = None
    amazon: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370125952
    ] = None
    neuralspace: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370128768
    ] = None
    openai: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370129712
    ] = None
    phedone: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370130656
    ] = None
    modernmt: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370134016
    ] = None
    huggingface: Optional[
        PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370134960
    ] = None
    __properties: ClassVar[List[str]] = [
        "microsoft",
        "google",
        "ibm",
        "deepl",
        "amazon",
        "neuralspace",
        "openai",
        "phedone",
        "modernmt",
        "huggingface",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslationautomaticTranslationResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of microsoft
        if self.microsoft:
            _dict["microsoft"] = self.microsoft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google
        if self.google:
            _dict["google"] = self.google.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ibm
        if self.ibm:
            _dict["ibm"] = self.ibm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deepl
        if self.deepl:
            _dict["deepl"] = self.deepl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon
        if self.amazon:
            _dict["amazon"] = self.amazon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neuralspace
        if self.neuralspace:
            _dict["neuralspace"] = self.neuralspace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of openai
        if self.openai:
            _dict["openai"] = self.openai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phedone
        if self.phedone:
            _dict["phedone"] = self.phedone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modernmt
        if self.modernmt:
            _dict["modernmt"] = self.modernmt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of huggingface
        if self.huggingface:
            _dict["huggingface"] = self.huggingface.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslationautomaticTranslationResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "microsoft": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559368281840.from_dict(
                    obj["microsoft"]
                )
                if obj.get("microsoft") is not None
                else None,
                "google": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370118992.from_dict(
                    obj["google"]
                )
                if obj.get("google") is not None
                else None,
                "ibm": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370124064.from_dict(
                    obj["ibm"]
                )
                if obj.get("ibm") is not None
                else None,
                "deepl": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370125008.from_dict(
                    obj["deepl"]
                )
                if obj.get("deepl") is not None
                else None,
                "amazon": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370125952.from_dict(
                    obj["amazon"]
                )
                if obj.get("amazon") is not None
                else None,
                "neuralspace": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370128768.from_dict(
                    obj["neuralspace"]
                )
                if obj.get("neuralspace") is not None
                else None,
                "openai": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370129712.from_dict(
                    obj["openai"]
                )
                if obj.get("openai") is not None
                else None,
                "phedone": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370130656.from_dict(
                    obj["phedone"]
                )
                if obj.get("phedone") is not None
                else None,
                "modernmt": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370134016.from_dict(
                    obj["modernmt"]
                )
                if obj.get("modernmt") is not None
                else None,
                "huggingface": PydanticMainTranslationautomaticTranslationAutomaticTranslationDataClass94559370134960.from_dict(
                    obj["huggingface"]
                )
                if obj.get("huggingface") is not None
                else None,
            }
        )
        return _obj
