# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List
from openapi_client.models.face_attributes import FaceAttributes
from openapi_client.models.landmarks_video import LandmarksVideo
from openapi_client.models.video_bounding_box import VideoBoundingBox
from typing import Optional, Set
from typing_extensions import Self


class VideoFace(BaseModel):
    """
    VideoFace
    """  # noqa: E501

    offset: StrictInt
    bounding_box: VideoBoundingBox
    attributes: FaceAttributes
    landmarks: LandmarksVideo
    __properties: ClassVar[List[str]] = [
        "offset",
        "bounding_box",
        "attributes",
        "landmarks",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoFace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_box
        if self.bounding_box:
            _dict["bounding_box"] = self.bounding_box.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict["attributes"] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of landmarks
        if self.landmarks:
            _dict["landmarks"] = self.landmarks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoFace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "offset": obj.get("offset"),
                "bounding_box": VideoBoundingBox.from_dict(obj["bounding_box"])
                if obj.get("bounding_box") is not None
                else None,
                "attributes": FaceAttributes.from_dict(obj["attributes"])
                if obj.get("attributes") is not None
                else None,
                "landmarks": LandmarksVideo.from_dict(obj["landmarks"])
                if obj.get("landmarks") is not None
                else None,
            }
        )
        return _obj
