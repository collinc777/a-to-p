# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from openapi_client.models.imagelogo_detection_response_model import (
    ImagelogoDetectionResponseModel,
)


class TestImagelogoDetectionResponseModel(unittest.TestCase):
    """ImagelogoDetectionResponseModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImagelogoDetectionResponseModel:
        """Test ImagelogoDetectionResponseModel
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ImagelogoDetectionResponseModel`
        """
        model = ImagelogoDetectionResponseModel()
        if include_optional:
            return ImagelogoDetectionResponseModel(
                microsoft = openapi_client.models.imagelogo_detection_logo_detection_data_class.imagelogo_detectionLogoDetectionDataClass(
                    items = [
                        openapi_client.models.logo_item.LogoItem(
                            bounding_poly = openapi_client.models.logo_bounding_poly.LogoBoundingPoly(
                                vertices = [
                                    openapi_client.models.logo_vertice.LogoVertice(
                                        x = 56, 
                                        y = 56, )
                                    ], ), 
                            description = '', 
                            score = 56, )
                        ], 
                    original_response = null, 
                    status = null, ),
                google = openapi_client.models.imagelogo_detection_logo_detection_data_class.imagelogo_detectionLogoDetectionDataClass(
                    items = [
                        openapi_client.models.logo_item.LogoItem(
                            bounding_poly = openapi_client.models.logo_bounding_poly.LogoBoundingPoly(
                                vertices = [
                                    openapi_client.models.logo_vertice.LogoVertice(
                                        x = 56, 
                                        y = 56, )
                                    ], ), 
                            description = '', 
                            score = 56, )
                        ], 
                    original_response = null, 
                    status = null, ),
                clarifai = openapi_client.models.imagelogo_detection_logo_detection_data_class.imagelogo_detectionLogoDetectionDataClass(
                    items = [
                        openapi_client.models.logo_item.LogoItem(
                            bounding_poly = openapi_client.models.logo_bounding_poly.LogoBoundingPoly(
                                vertices = [
                                    openapi_client.models.logo_vertice.LogoVertice(
                                        x = 56, 
                                        y = 56, )
                                    ], ), 
                            description = '', 
                            score = 56, )
                        ], 
                    original_response = null, 
                    status = null, ),
                api4ai = openapi_client.models.imagelogo_detection_logo_detection_data_class.imagelogo_detectionLogoDetectionDataClass(
                    items = [
                        openapi_client.models.logo_item.LogoItem(
                            bounding_poly = openapi_client.models.logo_bounding_poly.LogoBoundingPoly(
                                vertices = [
                                    openapi_client.models.logo_vertice.LogoVertice(
                                        x = 56, 
                                        y = 56, )
                                    ], ), 
                            description = '', 
                            score = 56, )
                        ], 
                    original_response = null, 
                    status = null, ),
                smartclick = openapi_client.models.imagelogo_detection_logo_detection_data_class.imagelogo_detectionLogoDetectionDataClass(
                    items = [
                        openapi_client.models.logo_item.LogoItem(
                            bounding_poly = openapi_client.models.logo_bounding_poly.LogoBoundingPoly(
                                vertices = [
                                    openapi_client.models.logo_vertice.LogoVertice(
                                        x = 56, 
                                        y = 56, )
                                    ], ), 
                            description = '', 
                            score = 56, )
                        ], 
                    original_response = null, 
                    status = null, )
            )
        else:
            return ImagelogoDetectionResponseModel(
        )
        """

    def testImagelogoDetectionResponseModel(self):
        """Test ImagelogoDetectionResponseModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
