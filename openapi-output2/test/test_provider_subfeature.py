# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from openapi_client.models.provider_subfeature import ProviderSubfeature


class TestProviderSubfeature(unittest.TestCase):
    """ProviderSubfeature unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProviderSubfeature:
        """Test ProviderSubfeature
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ProviderSubfeature`
        """
        model = ProviderSubfeature()
        if include_optional:
            return ProviderSubfeature(
                name = '',
                version = '',
                pricings = [
                    openapi_client.models.pricing_serialzier.PricingSerialzier(
                        model_name = '', 
                        price = '-807', 
                        price_unit_quantity = 0, 
                        min_price_quantity = 0, 
                        price_unit_type = 'file', 
                        detail_type = null, 
                        detail_value = '', 
                        get_detail_type_display = '', 
                        is_post_call = True, )
                    ],
                is_working = True,
                description_title = '',
                description_content = '',
                provider = openapi_client.models.provider.Provider(
                    name = '', 
                    fullname = '', 
                    description = '', ),
                feature = openapi_client.models.feature.Feature(
                    name = '', 
                    fullname = '', 
                    description = '', ),
                subfeature = openapi_client.models.subfeature.Subfeature(
                    name = '', 
                    fullname = '', 
                    description = '', ),
                constraints = {
                    'key' : null
                    },
                models = {
                    'key' : null
                    },
                languages = [
                    openapi_client.models.provider_subfeature_languages_inner.ProviderSubfeature_languages_inner(
                        language_name = '', 
                        language_code = '', )
                    ],
                phase = ''
            )
        else:
            return ProviderSubfeature(
                name = '',
                version = '',
                pricings = [
                    openapi_client.models.pricing_serialzier.PricingSerialzier(
                        model_name = '', 
                        price = '-807', 
                        price_unit_quantity = 0, 
                        min_price_quantity = 0, 
                        price_unit_type = 'file', 
                        detail_type = null, 
                        detail_value = '', 
                        get_detail_type_display = '', 
                        is_post_call = True, )
                    ],
                provider = openapi_client.models.provider.Provider(
                    name = '', 
                    fullname = '', 
                    description = '', ),
                feature = openapi_client.models.feature.Feature(
                    name = '', 
                    fullname = '', 
                    description = '', ),
                subfeature = openapi_client.models.subfeature.Subfeature(
                    name = '', 
                    fullname = '', 
                    description = '', ),
                constraints = {
                    'key' : null
                    },
                models = {
                    'key' : null
                    },
                languages = [
                    openapi_client.models.provider_subfeature_languages_inner.ProviderSubfeature_languages_inner(
                        language_name = '', 
                        language_code = '', )
                    ],
                phase = '',
        )
        """

    def testProviderSubfeature(self):
        """Test ProviderSubfeature"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
