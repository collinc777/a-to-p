# coding: utf-8

"""
Eden AI

Your project description

The version of the OpenAPI document: 2.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from openapi_client.models.videoface_detection_async_model import (
    VideofaceDetectionAsyncModel,
)


class TestVideofaceDetectionAsyncModel(unittest.TestCase):
    """VideofaceDetectionAsyncModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VideofaceDetectionAsyncModel:
        """Test VideofaceDetectionAsyncModel
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `VideofaceDetectionAsyncModel`
        """
        model = VideofaceDetectionAsyncModel()
        if include_optional:
            return VideofaceDetectionAsyncModel(
                amazon = openapi_client.models.videoface_detection_async_face_detection_async_data_class.videoface_detection_asyncFaceDetectionAsyncDataClass(
                    faces = [
                        openapi_client.models.video_face.VideoFace(
                            offset = 56, 
                            bounding_box = openapi_client.models.video_bounding_box.VideoBoundingBox(
                                top = 56, 
                                left = 56, 
                                height = 56, 
                                width = 56, ), 
                            attributes = openapi_client.models.face_attributes.FaceAttributes(
                                headwear = 56, 
                                frontal_gaze = 56, 
                                eyes_visible = 56, 
                                glasses = 56, 
                                mouth_open = 56, 
                                smiling = 56, 
                                brightness = 56, 
                                sharpness = 56, 
                                pose = openapi_client.models.video_face_poses.VideoFacePoses(
                                    pitch = 56, 
                                    roll = 56, 
                                    yawn = 56, ), ), 
                            landmarks = openapi_client.models.landmarks_video.LandmarksVideo(
                                eye_left = [
                                    56
                                    ], 
                                eye_right = [
                                    56
                                    ], 
                                nose = [
                                    56
                                    ], 
                                mouth_left = [
                                    56
                                    ], 
                                mouth_right = [
                                    56
                                    ], ), )
                        ], 
                    original_response = null, 
                    id = '', 
                    final_status = null, 
                    error = openapi_client.models.error.Error(), ),
                google = openapi_client.models.videoface_detection_async_face_detection_async_data_class.videoface_detection_asyncFaceDetectionAsyncDataClass(
                    faces = [
                        openapi_client.models.video_face.VideoFace(
                            offset = 56, 
                            bounding_box = openapi_client.models.video_bounding_box.VideoBoundingBox(
                                top = 56, 
                                left = 56, 
                                height = 56, 
                                width = 56, ), 
                            attributes = openapi_client.models.face_attributes.FaceAttributes(
                                headwear = 56, 
                                frontal_gaze = 56, 
                                eyes_visible = 56, 
                                glasses = 56, 
                                mouth_open = 56, 
                                smiling = 56, 
                                brightness = 56, 
                                sharpness = 56, 
                                pose = openapi_client.models.video_face_poses.VideoFacePoses(
                                    pitch = 56, 
                                    roll = 56, 
                                    yawn = 56, ), ), 
                            landmarks = openapi_client.models.landmarks_video.LandmarksVideo(
                                eye_left = [
                                    56
                                    ], 
                                eye_right = [
                                    56
                                    ], 
                                nose = [
                                    56
                                    ], 
                                mouth_left = [
                                    56
                                    ], 
                                mouth_right = [
                                    56
                                    ], ), )
                        ], 
                    original_response = null, 
                    id = '', 
                    final_status = null, 
                    error = openapi_client.models.error.Error(), )
            )
        else:
            return VideofaceDetectionAsyncModel(
        )
        """

    def testVideofaceDetectionAsyncModel(self):
        """Test VideofaceDetectionAsyncModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
